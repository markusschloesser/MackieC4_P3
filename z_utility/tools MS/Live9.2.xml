<?xml-stylesheet type="text/css" href="Live.css"?>
<Live>
Live API version 9.2.0
<Doc>	Unofficial Live API documentation generated by the "API_MakeDoc" MIDI Remote Script.   
            <requirement xmlns:html="http://www.w3.org/1999/xhtml">
            <html:a href="http://remotescripts.blogspot.com">http://remotescripts.blogspot.com</html:a></requirement>
            </Doc>

<Doc>	This is unofficial documentation. Please do not contact Ableton with questions or problems relating to the use of this documentation.</Doc>

<Module>Live<Description>Module</Description></Module>

<Module>Live.Application<Description>Module</Description></Module>

<Built-In>Live.Application.combine_apcs()<Description>Built-In</Description></Built-In>

<Doc>	combine_apcs() -&gt; bool : Returns true if multiple APCs should be combined. C++ signature :  bool combine_apcs()</Doc>

<Built-In>Live.Application.encrypt_challenge()<Description>Built-In</Description></Built-In>

<Doc>	encrypt_challenge( (int)dongle1, (int)dongle2 [, (int)key_index=0]) -&gt; tuple : Returns an encrypted challenge based on the TEA algortithm C++ signature :  boost::python::tuple encrypt_challenge(int,int [,int=0])</Doc>

<Built-In>Live.Application.encrypt_challenge2()<Description>Built-In</Description></Built-In>

<Doc>	encrypt_challenge2( (int)arg1) -&gt; int : Returns the UMAC hash for the given challenge. C++ signature :  int encrypt_challenge2(int)</Doc>

<Built-In>Live.Application.get_application()<Description>Built-In</Description></Built-In>

<Doc>	get_application() -&gt; Application : Returns the application instance. C++ signature :  TWeakPtr&lt;TPyHandle&lt;ASongApp&gt; &gt; get_application()</Doc>

<Built-In>Live.Application.get_random_int()<Description>Built-In</Description></Built-In>

<Doc>	get_random_int( (int)arg1, (int)arg2) -&gt; int : Returns a random integer from the given range. C++ signature :  int get_random_int(int,int)</Doc>

<Class>Live.Application.Application<Description>Class</Description></Class>

<Doc>	This class represents the Live application.</Doc>

<Property>Live.Application.Application.browser<Description>Property</Description></Property>

<Doc>	Returns an interface to the browser.</Doc>

<Property>Live.Application.Application.canonical_parent<Description>Property</Description></Property>

<Doc>	Returns the canonical parent of the application.</Doc>

<Property>Live.Application.Application.current_dialog_button_count<Description>Property</Description></Property>

<Doc>	Number of buttons on the current dialog.</Doc>

<Property>Live.Application.Application.current_dialog_message<Description>Property</Description></Property>

<Doc>	Text of the last dialog that appeared; Empty if all dialogs just disappeared.</Doc>

<Property>Live.Application.Application.open_dialog_count<Description>Property</Description></Property>

<Doc>	The number of open dialogs in Live. 0 if not dialog is open.</Doc>

<Property>Live.Application.Application.view<Description>Property</Description></Property>

<Doc>	Returns the applications view component.</Doc>

<Method>Live.Application.Application.add_open_dialog_count_listener()<Description>Method</Description></Method>

<Doc>	add_open_dialog_count_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "open_dialog_count" has changed. C++ signature :  void add_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.get_bugfix_version()<Description>Method</Description></Method>

<Doc>	get_bugfix_version( (Application)arg1) -&gt; int : Returns an integer representing the bugfix version of Live. C++ signature :  int get_bugfix_version(TPyHandle&lt;ASongApp&gt;)</Doc>

<Method>Live.Application.Application.get_document()<Description>Method</Description></Method>

<Doc>	get_document( (Application)arg1) -&gt; Song : Returns the current Live Set. C++ signature :  TWeakPtr&lt;TPyHandle&lt;ASong&gt; &gt; get_document(TPyHandle&lt;ASongApp&gt;)</Doc>

<Method>Live.Application.Application.get_major_version()<Description>Method</Description></Method>

<Doc>	get_major_version( (Application)arg1) -&gt; int : Returns an integer representing the major version of Live. C++ signature :  int get_major_version(TPyHandle&lt;ASongApp&gt;)</Doc>

<Method>Live.Application.Application.get_minor_version()<Description>Method</Description></Method>

<Doc>	get_minor_version( (Application)arg1) -&gt; int : Returns an integer representing the minor version of Live. C++ signature :  int get_minor_version(TPyHandle&lt;ASongApp&gt;)</Doc>

<Method>Live.Application.Application.open_dialog_count_has_listener()<Description>Method</Description></Method>

<Doc>	open_dialog_count_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "open_dialog_count". C++ signature :  bool open_dialog_count_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.press_current_dialog_button()<Description>Method</Description></Method>

<Doc>	press_current_dialog_button( (Application)arg1, (int)arg2) -&gt; None : Press a button, by index, on the current message box. C++ signature :  void press_current_dialog_button(TPyHandle&lt;ASongApp&gt;,int)</Doc>

<Method>Live.Application.Application.remove_open_dialog_count_listener()<Description>Method</Description></Method>

<Doc>	remove_open_dialog_count_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "open_dialog_count". C++ signature :  void remove_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Class>Live.Application.Application.View<Description>Class</Description></Class>

<Doc>	This class represents the view aspects of the Live application.</Doc>

<Property>Live.Application.Application.View.browse_mode<Description>Property</Description></Property>

<Doc>	Return true if HotSwap mode is active for any target.</Doc>

<Property>Live.Application.Application.View.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the application view.</Doc>

<Method>Live.Application.Application.View.add_browse_mode_listener()<Description>Method</Description></Method>

<Doc>	add_browse_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "browse_mode" has changed. C++ signature :  void add_browse_mode_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.add_is_view_visible_listener()<Description>Method</Description></Method>

<Doc>	add_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_view_visible" has changed. C++ signature :  void add_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.add_view_focus_changed_listener()<Description>Method</Description></Method>

<Doc>	add_view_focus_changed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "view_focus_changed" has changed. C++ signature :  void add_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.available_main_views()<Description>Method</Description></Method>

<Doc>	available_main_views( (View)arg1) -&gt; StringVector : Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A 'subcomponent view' is a main view component of a document view, like the Session view, the Arranger or Detailview and so on... C++ signature :  std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt; &gt; available_main_views(TPyViewData&lt;ASongApp&gt;)</Doc>

<Method>Live.Application.Application.View.browse_mode_has_listener()<Description>Method</Description></Method>

<Doc>	browse_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "browse_mode". C++ signature :  bool browse_mode_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.focus_view()<Description>Method</Description></Method>

<Doc>	focus_view( (View)arg1, (object)arg2) -&gt; None : Show and focus one through the identifier string specified view. C++ signature :  void focus_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>

<Method>Live.Application.Application.View.hide_view()<Description>Method</Description></Method>

<Doc>	hide_view( (View)arg1, (object)arg2) -&gt; None : Hide one through the identifier string specified view. C++ signature :  void hide_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>

<Method>Live.Application.Application.View.is_view_visible()<Description>Method</Description></Method>

<Doc>	is_view_visible( (View)arg1, (object)identifier [, (bool)main_window_only=True]) -&gt; bool : Return true if the through the identifier string specified view is currently visible. If main_window_only is set to False, this will also check in second window. Notifications from the second window are not yet supported. C++ signature :  bool is_view_visible(TPyViewData&lt;ASongApp&gt;,TString [,bool=True])</Doc>

<Method>Live.Application.Application.View.is_view_visible_has_listener()<Description>Method</Description></Method>

<Doc>	is_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_view_visible". C++ signature :  bool is_view_visible_has_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.remove_browse_mode_listener()<Description>Method</Description></Method>

<Doc>	remove_browse_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "browse_mode". C++ signature :  void remove_browse_mode_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.remove_is_view_visible_listener()<Description>Method</Description></Method>

<Doc>	remove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; None : Remove a previously set listener function or method from property "is_view_visible". C++ signature :  void remove_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.remove_view_focus_changed_listener()<Description>Method</Description></Method>

<Doc>	remove_view_focus_changed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "view_focus_changed". C++ signature :  void remove_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.scroll_view()<Description>Method</Description></Method>

<Doc>	scroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -&gt; None : Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void scroll_view(TPyViewData&lt;ASongApp&gt;,int,TString,bool)</Doc>

<Method>Live.Application.Application.View.show_view()<Description>Method</Description></Method>

<Doc>	show_view( (View)arg1, (object)arg2) -&gt; None : Show one through the identifier string specified view. Will throw a runtime error if this is called in Live's initialization scope. C++ signature :  void show_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>

<Method>Live.Application.Application.View.toggle_browse()<Description>Method</Description></Method>

<Doc>	toggle_browse( (View)arg1) -&gt; None : Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. C++ signature :  void toggle_browse(TPyViewData&lt;ASongApp&gt;)</Doc>

<Method>Live.Application.Application.View.view_focus_changed_has_listener()<Description>Method</Description></Method>

<Doc>	view_focus_changed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "view_focus_changed". C++ signature :  bool view_focus_changed_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>

<Method>Live.Application.Application.View.zoom_view()<Description>Method</Description></Method>

<Doc>	zoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -&gt; None : Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void zoom_view(TPyViewData&lt;ASongApp&gt;,int,TString,bool)</Doc>

<Sub-Class>Live.Application.Application.View.NavDirection<Description>Sub-Class</Description></Sub-Class>

<Value>Live.Application.Application.View.NavDirection.down<Description>Value</Description></Value>

<Value>Live.Application.Application.View.NavDirection.left<Description>Value</Description></Value>

<Value>Live.Application.Application.View.NavDirection.right<Description>Value</Description></Value>

<Value>Live.Application.Application.View.NavDirection.up<Description>Value</Description></Value>

<Module>Live.Base<Description>Module</Description></Module>

<Class>Live.Base.IntVector<Description>Class</Description></Class>

<Doc>	A simple container for returning integers from Live.</Doc>

<Method>Live.Base.IntVector.append()<Description>Method</Description></Method>

<Doc>	append( (IntVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Method>Live.Base.IntVector.extend()<Description>Method</Description></Method>

<Doc>	extend( (IntVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Class>Live.Base.LimitationError<Description>Class</Description></Class>

<Class>Live.Base.StringVector<Description>Class</Description></Class>

<Doc>	A simple container for returning strings from Live.</Doc>

<Method>Live.Base.StringVector.append()<Description>Method</Description></Method>

<Doc>	append( (StringVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Method>Live.Base.StringVector.extend()<Description>Method</Description></Method>

<Doc>	extend( (StringVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Class>Live.Base.Vector<Description>Class</Description></Class>

<Doc>	A simple read only container for returning objects from Live.</Doc>

<Method>Live.Base.Vector.append()<Description>Method</Description></Method>

<Doc>	append( (Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Method>Live.Base.Vector.extend()<Description>Method</Description></Method>

<Doc>	extend( (Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Module>Live.Browser<Description>Module</Description></Module>

<Class>Live.Browser.Browser<Description>Class</Description></Class>

<Doc>	This class represents the live browser data base.</Doc>

<Property>Live.Browser.Browser.filter_type<Description>Property</Description></Property>

<Doc>	Bang triggered when the hotswap target has changed.</Doc>

<Property>Live.Browser.Browser.hotswap_target<Description>Property</Description></Property>

<Doc>	Bang triggered when the hotswap target has changed.</Doc>

<Property>Live.Browser.Browser.packs<Description>Property</Description></Property>

<Doc>	Const access to the list of packs of the browser.</Doc>

<Property>Live.Browser.Browser.places<Description>Property</Description></Property>

<Doc>	Const access to the list of places of the browser.</Doc>

<Property>Live.Browser.Browser.tags<Description>Property</Description></Property>

<Doc>	Const access to the list of tags of the browser.</Doc>

<Method>Live.Browser.Browser.add_filter_type_listener()<Description>Method</Description></Method>

<Doc>	add_filter_type_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "filter_type" has changed. C++ signature :  void add_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.add_full_refresh_listener()<Description>Method</Description></Method>

<Doc>	add_full_refresh_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "full_refresh" has changed. C++ signature :  void add_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.add_hotswap_target_listener()<Description>Method</Description></Method>

<Doc>	add_hotswap_target_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "hotswap_target" has changed. C++ signature :  void add_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.filter_type_has_listener()<Description>Method</Description></Method>

<Doc>	filter_type_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "filter_type". C++ signature :  bool filter_type_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.full_refresh_has_listener()<Description>Method</Description></Method>

<Doc>	full_refresh_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "full_refresh". C++ signature :  bool full_refresh_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.hotswap_target_has_listener()<Description>Method</Description></Method>

<Doc>	hotswap_target_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "hotswap_target". C++ signature :  bool hotswap_target_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.load_item()<Description>Method</Description></Method>

<Doc>	load_item( (Browser)arg1, (BrowserItem)arg2) -&gt; None : Loads the provided browser item. C++ signature :  void load_item(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>

<Method>Live.Browser.Browser.remove_filter_type_listener()<Description>Method</Description></Method>

<Doc>	remove_filter_type_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "filter_type". C++ signature :  void remove_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.remove_full_refresh_listener()<Description>Method</Description></Method>

<Doc>	remove_full_refresh_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "full_refresh". C++ signature :  void remove_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Method>Live.Browser.Browser.remove_hotswap_target_listener()<Description>Method</Description></Method>

<Doc>	remove_hotswap_target_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "hotswap_target". C++ signature :  void remove_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>

<Class>Live.Browser.BrowserItem<Description>Class</Description></Class>

<Doc>	This class represents an item of the browser hierarchy.</Doc>

<Property>Live.Browser.BrowserItem.children<Description>Property</Description></Property>

<Doc>	Const access to the descendants of this browser item.</Doc>

<Property>Live.Browser.BrowserItem.is_device<Description>Property</Description></Property>

<Doc>	Indicates if the browser item represents a device.</Doc>

<Property>Live.Browser.BrowserItem.is_folder<Description>Property</Description></Property>

<Doc>	Indicates if the browser item represents folder.</Doc>

<Property>Live.Browser.BrowserItem.is_loadable<Description>Property</Description></Property>

<Doc>	True if item can be loaded via the Browser's 'load_item' method.</Doc>

<Property>Live.Browser.BrowserItem.is_selected<Description>Property</Description></Property>

<Doc>	True if the item is ancestor of or the actual selection.</Doc>

<Property>Live.Browser.BrowserItem.name<Description>Property</Description></Property>

<Doc>	Const access to the canonical display name of this browser item.</Doc>

<Property>Live.Browser.BrowserItem.source<Description>Property</Description></Property>

<Doc>	Specifies where does item come from -- i.e. Live pack, user library...</Doc>

<Class>Live.Browser.BrowserItemVector<Description>Class</Description></Class>

<Doc>	A container for returning browser items from Live.</Doc>

<Method>Live.Browser.BrowserItemVector.append()<Description>Method</Description></Method>

<Doc>	append( (BrowserItemVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Method>Live.Browser.BrowserItemVector.extend()<Description>Method</Description></Method>

<Doc>	extend( (BrowserItemVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt; &gt; {lvalue},boost::python::api::object)</Doc>

<Class>Live.Browser.FilterType<Description>Class</Description></Class>

<Value>Live.Browser.FilterType.audio_effect_hotswap<Description>Value</Description></Value>

<Value>Live.Browser.FilterType.count<Description>Value</Description></Value>

<Value>Live.Browser.FilterType.disabled<Description>Value</Description></Value>

<Value>Live.Browser.FilterType.drum_pad_hotswap<Description>Value</Description></Value>

<Value>Live.Browser.FilterType.hotswap_off<Description>Value</Description></Value>

<Value>Live.Browser.FilterType.instrument_hotswap<Description>Value</Description></Value>

<Value>Live.Browser.FilterType.midi_effect_hotswap<Description>Value</Description></Value>

<Module>Live.Chain<Description>Module</Description></Module>

<Class>Live.Chain.Chain<Description>Class</Description></Class>

<Doc>	This class represents a group device chain in Live.</Doc>

<Property>Live.Chain.Chain.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the chain.</Doc>

<Property>Live.Chain.Chain.devices<Description>Property</Description></Property>

<Doc>	Return const access to all available Devices that are present in the chains</Doc>

<Property>Live.Chain.Chain.has_audio_input<Description>Property</Description></Property>

<Doc>	return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.</Doc>

<Property>Live.Chain.Chain.has_audio_output<Description>Property</Description></Property>

<Doc>	return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.</Doc>

<Property>Live.Chain.Chain.has_midi_input<Description>Property</Description></Property>

<Doc>	return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.</Doc>

<Property>Live.Chain.Chain.has_midi_output<Description>Property</Description></Property>

<Doc>	return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.</Doc>

<Property>Live.Chain.Chain.mixer_device<Description>Property</Description></Property>

<Doc>	Return access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts.</Doc>

<Property>Live.Chain.Chain.mute<Description>Property</Description></Property>

<Doc>	Mute/unmute the chain.</Doc>

<Property>Live.Chain.Chain.muted_via_solo<Description>Property</Description></Property>

<Doc>	Return const access to whether this chain is muted due to some other chainbeing soloed.</Doc>

<Property>Live.Chain.Chain.name<Description>Property</Description></Property>

<Doc>	Read/write access to the name of the Chain, as visible in the track header.</Doc>

<Property>Live.Chain.Chain.solo<Description>Property</Description></Property>

<Doc>	Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.</Doc>

<Method>Live.Chain.Chain.add_devices_listener()<Description>Method</Description></Method>

<Doc>	add_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.add_mute_listener()<Description>Method</Description></Method>

<Doc>	add_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.add_muted_via_solo_listener()<Description>Method</Description></Method>

<Doc>	add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.add_solo_listener()<Description>Method</Description></Method>

<Doc>	add_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.delete_device()<Description>Method</Description></Method>

<Doc>	delete_device( (Chain)arg1, (int)arg2) -&gt; None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)</Doc>

<Method>Live.Chain.Chain.devices_has_listener()<Description>Method</Description></Method>

<Doc>	devices_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.mute_has_listener()<Description>Method</Description></Method>

<Doc>	mute_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.muted_via_solo_has_listener()<Description>Method</Description></Method>

<Doc>	muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.remove_devices_listener()<Description>Method</Description></Method>

<Doc>	remove_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.remove_mute_listener()<Description>Method</Description></Method>

<Doc>	remove_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.remove_muted_via_solo_listener()<Description>Method</Description></Method>

<Doc>	remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.remove_solo_listener()<Description>Method</Description></Method>

<Doc>	remove_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Method>Live.Chain.Chain.solo_has_listener()<Description>Method</Description></Method>

<Doc>	solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>

<Module>Live.ChainMixerDevice<Description>Module</Description></Module>

<Class>Live.ChainMixerDevice.ChainMixerDevice<Description>Class</Description></Class>

<Doc>	This class represents a Chain's Mixer Device in Live, which gives youaccess to the Volume, Panning, and Send properties of a Chain.</Doc>

<Property>Live.ChainMixerDevice.ChainMixerDevice.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the mixer device.</Doc>

<Property>Live.ChainMixerDevice.ChainMixerDevice.chain_activator<Description>Property</Description></Property>

<Doc>	Const access to the Chain's Activator Device Parameter.</Doc>

<Property>Live.ChainMixerDevice.ChainMixerDevice.panning<Description>Property</Description></Property>

<Doc>	Const access to the Chain's Panning Device Parameter.</Doc>

<Property>Live.ChainMixerDevice.ChainMixerDevice.sends<Description>Property</Description></Property>

<Doc>	Const access to the Chain's list of Send Amount Device Parameters.</Doc>

<Property>Live.ChainMixerDevice.ChainMixerDevice.volume<Description>Property</Description></Property>

<Doc>	Const access to the Chain's Volume Device Parameter.</Doc>

<Method>Live.ChainMixerDevice.ChainMixerDevice.add_sends_listener()<Description>Method</Description></Method>

<Doc>	add_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sends" has changed. C++ signature :  void add_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.ChainMixerDevice.ChainMixerDevice.remove_sends_listener()<Description>Method</Description></Method>

<Doc>	remove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sends". C++ signature :  void remove_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.ChainMixerDevice.ChainMixerDevice.sends_has_listener()<Description>Method</Description></Method>

<Doc>	sends_has_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sends". C++ signature :  bool sends_has_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>

<Module>Live.Clip<Description>Module</Description></Module>

<Class>Live.Clip.AutomationEnvelope<Description>Class</Description></Class>

<Doc>	Describes parameter automation per clip.</Doc>

<Method>Live.Clip.AutomationEnvelope.insert_step()<Description>Method</Description></Method>

<Doc>	insert_step( (AutomationEnvelope)arg1, (float)arg2, (float)arg3, (float)arg4) -&gt; None : C++ signature :  void insert_step(AAutomation {lvalue},double,double,double)</Doc>

<Method>Live.Clip.AutomationEnvelope.value_at_time()<Description>Method</Description></Method>

<Doc>	value_at_time( (AutomationEnvelope)arg1, (float)arg2) -&gt; float : C++ signature :  double value_at_time(AAutomation {lvalue},double)</Doc>

<Class>Live.Clip.Clip<Description>Class</Description></Class>

<Doc>	This class represents a Clip in Live. It can be either an AudioClip or a MIDI Clip, in an Arrangement or the Session, dependingon the Track (Slot) it lives in.</Doc>

<Property>Live.Clip.Clip.available_warp_modes<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Get/Set the available warp modes, that can be used.</Doc>

<Property>Live.Clip.Clip.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the Clip.</Doc>

<Property>Live.Clip.Clip.color<Description>Property</Description></Property>

<Doc>	Get/set access to the color of the Clip (RGB).</Doc>

<Property>Live.Clip.Clip.end_marker<Description>Property</Description></Property>

<Doc>	Get/Set the Clips end marker pos in beats.</Doc>

<Property>Live.Clip.Clip.file_path<Description>Property</Description></Property>

<Doc>	Get the path of the file represented by the Audio Clip.</Doc>

<Property>Live.Clip.Clip.gain<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Read/write access to the gain setting of theAudio Clip</Doc>

<Property>Live.Clip.Clip.gain_display_string<Description>Property</Description></Property>

<Doc>	Return a string with the gain as dB value</Doc>

<Property>Live.Clip.Clip.has_envelopes<Description>Property</Description></Property>

<Doc>	Will notify if the clip gets his first envelope or the last envelope is removed.</Doc>

<Property>Live.Clip.Clip.is_arrangement_clip<Description>Property</Description></Property>

<Doc>	return true if this Clip is an Arrangement Clip.A Clip can be either a Session or Arrangement Clip.</Doc>

<Property>Live.Clip.Clip.is_audio_clip<Description>Property</Description></Property>

<Doc>	Return true if this Clip is an Audio Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc>

<Property>Live.Clip.Clip.is_midi_clip<Description>Property</Description></Property>

<Doc>	return true if this Clip is a MIDI Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc>

<Property>Live.Clip.Clip.is_overdubbing<Description>Property</Description></Property>

<Doc>	returns true if the Clip is recording overdubs</Doc>

<Property>Live.Clip.Clip.is_playing<Description>Property</Description></Property>

<Doc>	Get/Set if this Clip is currently playing. If the Clips trigger modeis set to a quantization value, the Clip will not start playing immediately.If you need to know wether the Clip was triggered, use the is_triggered property.</Doc>

<Property>Live.Clip.Clip.is_recording<Description>Property</Description></Property>

<Doc>	returns true if the Clip was triggered to record or is recording.</Doc>

<Property>Live.Clip.Clip.is_triggered<Description>Property</Description></Property>

<Doc>	returns true if the Clip was triggered or is playing.</Doc>

<Property>Live.Clip.Clip.length<Description>Property</Description></Property>

<Doc>	Get to the Clips length in beats.</Doc>

<Property>Live.Clip.Clip.loop_end<Description>Property</Description></Property>

<Doc>	Get/Set the loop end pos of this Clip in beats.</Doc>

<Property>Live.Clip.Clip.loop_start<Description>Property</Description></Property>

<Doc>	Get/Set the Clips loopstart pos in beats.</Doc>

<Property>Live.Clip.Clip.looping<Description>Property</Description></Property>

<Doc>	Get/Set the Clips 'loop is enabled' flag.Only Warped Audio Clips or MIDI Clip can be looped.</Doc>

<Property>Live.Clip.Clip.muted<Description>Property</Description></Property>

<Doc>	Read/write access to the mute state of the Clip.</Doc>

<Property>Live.Clip.Clip.name<Description>Property</Description></Property>

<Doc>	Read/write access to the name of the Clip.</Doc>

<Property>Live.Clip.Clip.pitch_coarse<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Read/write access to the pitch (in halftones) setting of theAudio Clip, ranging from -48 to 48</Doc>

<Property>Live.Clip.Clip.pitch_fine<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Read/write access to the pitch fine setting of theAudio Clip, ranging from -500 to 500</Doc>

<Property>Live.Clip.Clip.playing_position<Description>Property</Description></Property>

<Doc>	Constant access to the current playing position of the clip.The returned value is the position in beats for midi and warped audio clips,or in seconds for unwarped audio clips. Stopped clips will return 0.</Doc>

<Property>Live.Clip.Clip.ram_mode<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Read/write access to the Ram mode setting of the Audio Clip</Doc>

<Property>Live.Clip.Clip.signature_denominator<Description>Property</Description></Property>

<Doc>	Get/Set access to the global signature denominator of the Clip.</Doc>

<Property>Live.Clip.Clip.signature_numerator<Description>Property</Description></Property>

<Doc>	Get/Set access to the global signature numerator of the Clip.</Doc>

<Property>Live.Clip.Clip.start_marker<Description>Property</Description></Property>

<Doc>	Get/Set the Clips start marker pos in beats.</Doc>

<Property>Live.Clip.Clip.start_time<Description>Property</Description></Property>

<Doc>	Get the clips start time offset.</Doc>

<Property>Live.Clip.Clip.view<Description>Property</Description></Property>

<Doc>	Get the view of the Clip.</Doc>

<Property>Live.Clip.Clip.warp_mode<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Get/Set the warp mode for this audio clip.</Doc>

<Property>Live.Clip.Clip.warping<Description>Property</Description></Property>

<Doc>	Available for AudioClips only.Get/Set if this Clip is timestreched.</Doc>

<Property>Live.Clip.Clip.will_record_on_start<Description>Property</Description></Property>

<Doc>	returns true if the Clip will record on being started.</Doc>

<Method>Live.Clip.Clip.add_color_listener()<Description>Method</Description></Method>

<Doc>	add_color_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_end_marker_listener()<Description>Method</Description></Method>

<Doc>	add_end_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_marker" has changed. C++ signature :  void add_end_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_gain_listener()<Description>Method</Description></Method>

<Doc>	add_gain_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_has_envelopes_listener()<Description>Method</Description></Method>

<Doc>	add_has_envelopes_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_envelopes" has changed. C++ signature :  void add_has_envelopes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_is_overdubbing_listener()<Description>Method</Description></Method>

<Doc>	add_is_overdubbing_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_overdubbing" has changed. C++ signature :  void add_is_overdubbing_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_is_recording_listener()<Description>Method</Description></Method>

<Doc>	add_is_recording_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_recording" has changed. C++ signature :  void add_is_recording_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_loop_end_listener()<Description>Method</Description></Method>

<Doc>	add_loop_end_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_end" has changed. C++ signature :  void add_loop_end_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_loop_jump_listener()<Description>Method</Description></Method>

<Doc>	add_loop_jump_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_jump" has changed. C++ signature :  void add_loop_jump_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_loop_start_listener()<Description>Method</Description></Method>

<Doc>	add_loop_start_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_start" has changed. C++ signature :  void add_loop_start_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_looping_listener()<Description>Method</Description></Method>

<Doc>	add_looping_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "looping" has changed. C++ signature :  void add_looping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_muted_listener()<Description>Method</Description></Method>

<Doc>	add_muted_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted" has changed. C++ signature :  void add_muted_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_notes_listener()<Description>Method</Description></Method>

<Doc>	add_notes_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "notes" has changed. C++ signature :  void add_notes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_pitch_coarse_listener()<Description>Method</Description></Method>

<Doc>	add_pitch_coarse_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_coarse" has changed. C++ signature :  void add_pitch_coarse_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_pitch_fine_listener()<Description>Method</Description></Method>

<Doc>	add_pitch_fine_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_fine" has changed. C++ signature :  void add_pitch_fine_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_playing_position_listener()<Description>Method</Description></Method>

<Doc>	add_playing_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position" has changed. C++ signature :  void add_playing_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_playing_status_listener()<Description>Method</Description></Method>

<Doc>	add_playing_status_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_status" has changed. C++ signature :  void add_playing_status_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_ram_mode_listener()<Description>Method</Description></Method>

<Doc>	add_ram_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ram_mode" has changed. C++ signature :  void add_ram_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_signature_denominator_listener()<Description>Method</Description></Method>

<Doc>	add_signature_denominator_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_denominator" has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_signature_numerator_listener()<Description>Method</Description></Method>

<Doc>	add_signature_numerator_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_numerator" has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_start_marker_listener()<Description>Method</Description></Method>

<Doc>	add_start_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_marker" has changed. C++ signature :  void add_start_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_warp_mode_listener()<Description>Method</Description></Method>

<Doc>	add_warp_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_mode" has changed. C++ signature :  void add_warp_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.add_warping_listener()<Description>Method</Description></Method>

<Doc>	add_warping_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warping" has changed. C++ signature :  void add_warping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.automation_envelope()<Description>Method</Description></Method>

<Doc>	automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; AutomationEnvelope : Return the envelope for the given parameter.Returns None for Arrangement clips.Returns None for parameters from a different track. C++ signature :  TWeakPtr&lt;AAutomation&gt; automation_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeable&gt;)</Doc>

<Method>Live.Clip.Clip.clear_all_envelopes()<Description>Method</Description></Method>

<Doc>	clear_all_envelopes( (Clip)arg1) -&gt; None : Clears all envelopes for this clip. C++ signature :  void clear_all_envelopes(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.clear_envelope()<Description>Method</Description></Method>

<Doc>	clear_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; None : Clears the envelope of this clips given parameter. C++ signature :  void clear_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeable&gt;)</Doc>

<Method>Live.Clip.Clip.color_has_listener()<Description>Method</Description></Method>

<Doc>	color_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.deselect_all_notes()<Description>Method</Description></Method>

<Doc>	deselect_all_notes( (Clip)arg1) -&gt; None : De-selects all notes present in the clip. C++ signature :  void deselect_all_notes(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.duplicate_loop()<Description>Method</Description></Method>

<Doc>	duplicate_loop( (Clip)arg1) -&gt; None : Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. C++ signature :  void duplicate_loop(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.end_marker_has_listener()<Description>Method</Description></Method>

<Doc>	end_marker_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_marker". C++ signature :  bool end_marker_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.fire()<Description>Method</Description></Method>

<Doc>	fire( (Clip)arg1) -&gt; None : (Re)Start playing this Clip. C++ signature :  void fire(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.gain_has_listener()<Description>Method</Description></Method>

<Doc>	gain_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.get_notes()<Description>Method</Description></Method>

<Doc>	get_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) -&gt; tuple : Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_notes(TPyHandle&lt;AClip&gt;,double,int,double,int)</Doc>

<Method>Live.Clip.Clip.get_selected_notes()<Description>Method</Description></Method>

<Doc>	get_selected_notes( (Clip)arg1) -&gt; tuple : Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_selected_notes(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.has_envelopes_has_listener()<Description>Method</Description></Method>

<Doc>	has_envelopes_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_envelopes". C++ signature :  bool has_envelopes_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.is_overdubbing_has_listener()<Description>Method</Description></Method>

<Doc>	is_overdubbing_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_overdubbing". C++ signature :  bool is_overdubbing_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.is_recording_has_listener()<Description>Method</Description></Method>

<Doc>	is_recording_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_recording". C++ signature :  bool is_recording_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.loop_end_has_listener()<Description>Method</Description></Method>

<Doc>	loop_end_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_end". C++ signature :  bool loop_end_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.loop_jump_has_listener()<Description>Method</Description></Method>

<Doc>	loop_jump_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_jump". C++ signature :  bool loop_jump_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.loop_start_has_listener()<Description>Method</Description></Method>

<Doc>	loop_start_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_start". C++ signature :  bool loop_start_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.looping_has_listener()<Description>Method</Description></Method>

<Doc>	looping_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "looping". C++ signature :  bool looping_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.move_playing_pos()<Description>Method</Description></Method>

<Doc>	move_playing_pos( (Clip)arg1, (float)arg2) -&gt; None : Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. C++ signature :  void move_playing_pos(TPyHandle&lt;AClip&gt;,double)</Doc>

<Method>Live.Clip.Clip.muted_has_listener()<Description>Method</Description></Method>

<Doc>	muted_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted". C++ signature :  bool muted_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.notes_has_listener()<Description>Method</Description></Method>

<Doc>	notes_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "notes". C++ signature :  bool notes_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.pitch_coarse_has_listener()<Description>Method</Description></Method>

<Doc>	pitch_coarse_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_coarse". C++ signature :  bool pitch_coarse_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.pitch_fine_has_listener()<Description>Method</Description></Method>

<Doc>	pitch_fine_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_fine". C++ signature :  bool pitch_fine_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.playing_position_has_listener()<Description>Method</Description></Method>

<Doc>	playing_position_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position". C++ signature :  bool playing_position_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.playing_status_has_listener()<Description>Method</Description></Method>

<Doc>	playing_status_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_status". C++ signature :  bool playing_status_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.quantize()<Description>Method</Description></Method>

<Doc>	quantize( (Clip)arg1, (int)arg2, (float)arg3) -&gt; None : Quantize all notes in a clip or align warp markers. C++ signature :  void quantize(TPyHandle&lt;AClip&gt;,int,float)</Doc>

<Method>Live.Clip.Clip.quantize_pitch()<Description>Method</Description></Method>

<Doc>	quantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) -&gt; None : Quantize all the notes of a given pitch.  Raises an error on audio clips. C++ signature :  void quantize_pitch(TPyHandle&lt;AClip&gt;,int,int,float)</Doc>

<Method>Live.Clip.Clip.ram_mode_has_listener()<Description>Method</Description></Method>

<Doc>	ram_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ram_mode". C++ signature :  bool ram_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_color_listener()<Description>Method</Description></Method>

<Doc>	remove_color_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_end_marker_listener()<Description>Method</Description></Method>

<Doc>	remove_end_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_marker". C++ signature :  void remove_end_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_gain_listener()<Description>Method</Description></Method>

<Doc>	remove_gain_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_has_envelopes_listener()<Description>Method</Description></Method>

<Doc>	remove_has_envelopes_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_envelopes". C++ signature :  void remove_has_envelopes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_is_overdubbing_listener()<Description>Method</Description></Method>

<Doc>	remove_is_overdubbing_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_overdubbing". C++ signature :  void remove_is_overdubbing_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_is_recording_listener()<Description>Method</Description></Method>

<Doc>	remove_is_recording_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_recording". C++ signature :  void remove_is_recording_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_loop_end_listener()<Description>Method</Description></Method>

<Doc>	remove_loop_end_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_end". C++ signature :  void remove_loop_end_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_loop_jump_listener()<Description>Method</Description></Method>

<Doc>	remove_loop_jump_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_jump". C++ signature :  void remove_loop_jump_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_loop_start_listener()<Description>Method</Description></Method>

<Doc>	remove_loop_start_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_start". C++ signature :  void remove_loop_start_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_looping_listener()<Description>Method</Description></Method>

<Doc>	remove_looping_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "looping". C++ signature :  void remove_looping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_muted_listener()<Description>Method</Description></Method>

<Doc>	remove_muted_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted". C++ signature :  void remove_muted_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_notes()<Description>Method</Description></Method>

<Doc>	remove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) -&gt; None : Delete all notes starting in the given pitch- and time range. C++ signature :  void remove_notes(TPyHandle&lt;AClip&gt;,double,int,double,int)</Doc>

<Method>Live.Clip.Clip.remove_notes_listener()<Description>Method</Description></Method>

<Doc>	remove_notes_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "notes". C++ signature :  void remove_notes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_pitch_coarse_listener()<Description>Method</Description></Method>

<Doc>	remove_pitch_coarse_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_coarse". C++ signature :  void remove_pitch_coarse_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_pitch_fine_listener()<Description>Method</Description></Method>

<Doc>	remove_pitch_fine_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_fine". C++ signature :  void remove_pitch_fine_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_playing_position_listener()<Description>Method</Description></Method>

<Doc>	remove_playing_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position". C++ signature :  void remove_playing_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_playing_status_listener()<Description>Method</Description></Method>

<Doc>	remove_playing_status_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_status". C++ signature :  void remove_playing_status_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_ram_mode_listener()<Description>Method</Description></Method>

<Doc>	remove_ram_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ram_mode". C++ signature :  void remove_ram_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_signature_denominator_listener()<Description>Method</Description></Method>

<Doc>	remove_signature_denominator_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_denominator". C++ signature :  void remove_signature_denominator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_signature_numerator_listener()<Description>Method</Description></Method>

<Doc>	remove_signature_numerator_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_numerator". C++ signature :  void remove_signature_numerator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_start_marker_listener()<Description>Method</Description></Method>

<Doc>	remove_start_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_marker". C++ signature :  void remove_start_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_warp_mode_listener()<Description>Method</Description></Method>

<Doc>	remove_warp_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_mode". C++ signature :  void remove_warp_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.remove_warping_listener()<Description>Method</Description></Method>

<Doc>	remove_warping_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warping". C++ signature :  void remove_warping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.replace_selected_notes()<Description>Method</Description></Method>

<Doc>	replace_selected_notes( (Clip)arg1, (tuple)arg2) -&gt; None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. C++ signature :  void replace_selected_notes(TPyHandle&lt;AClip&gt;,boost::python::tuple)</Doc>

<Method>Live.Clip.Clip.scrub()<Description>Method</Description></Method>

<Doc>	scrub( (Clip)self, (float)scrub_position) -&gt; None : Scrubs inside a clip. scrub_position defines the position in beats that the scrub will start from. The scrub will continue until stop_scrub is called. Global quantization applies to the scrub's position and length. C++ signature :  void scrub(TPyHandle&lt;AClip&gt;,double)</Doc>

<Method>Live.Clip.Clip.select_all_notes()<Description>Method</Description></Method>

<Doc>	select_all_notes( (Clip)arg1) -&gt; None : Selects all notes present in the clip. C++ signature :  void select_all_notes(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.set_fire_button_state()<Description>Method</Description></Method>

<Doc>	set_fire_button_state( (Clip)arg1, (bool)arg2) -&gt; None : Set the clip's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AClip&gt;,bool)</Doc>

<Method>Live.Clip.Clip.set_notes()<Description>Method</Description></Method>

<Doc>	set_notes( (Clip)arg1, (tuple)arg2) -&gt; None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. C++ signature :  void set_notes(TPyHandle&lt;AClip&gt;,boost::python::tuple)</Doc>

<Method>Live.Clip.Clip.signature_denominator_has_listener()<Description>Method</Description></Method>

<Doc>	signature_denominator_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_denominator". C++ signature :  bool signature_denominator_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.signature_numerator_has_listener()<Description>Method</Description></Method>

<Doc>	signature_numerator_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_numerator". C++ signature :  bool signature_numerator_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.start_marker_has_listener()<Description>Method</Description></Method>

<Doc>	start_marker_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_marker". C++ signature :  bool start_marker_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.stop()<Description>Method</Description></Method>

<Doc>	stop( (Clip)arg1) -&gt; None : Stop playing this Clip. C++ signature :  void stop(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.stop_scrub()<Description>Method</Description></Method>

<Doc>	stop_scrub( (Clip)arg1) -&gt; None : Stops the current scrub. C++ signature :  void stop_scrub(TPyHandle&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.warp_mode_has_listener()<Description>Method</Description></Method>

<Doc>	warp_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_mode". C++ signature :  bool warp_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Method>Live.Clip.Clip.warping_has_listener()<Description>Method</Description></Method>

<Doc>	warping_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warping". C++ signature :  bool warping_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>

<Class>Live.Clip.Clip.View<Description>Class</Description></Class>

<Doc>	Representing the view aspects of a Clip.</Doc>

<Property>Live.Clip.Clip.View.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the clip view.</Doc>

<Property>Live.Clip.Clip.View.grid_is_triplet<Description>Property</Description></Property>

<Doc>	Get/set wether the grid is showing in triplet mode.</Doc>

<Property>Live.Clip.Clip.View.grid_quantization<Description>Property</Description></Property>

<Doc>	Get/set clip grid quantization resolution.</Doc>

<Method>Live.Clip.Clip.View.hide_envelope()<Description>Method</Description></Method>

<Doc>	hide_envelope( (View)arg1) -&gt; None : Hide the envelope view. C++ signature :  void hide_envelope(TPyViewData&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.View.select_envelope_parameter()<Description>Method</Description></Method>

<Doc>	select_envelope_parameter( (View)arg1, (DeviceParameter)arg2) -&gt; None : Select the the given device parameter in the envelope view. C++ signature :  void select_envelope_parameter(TPyViewData&lt;AClip&gt;,TPyHandle&lt;ATimeable&gt;)</Doc>

<Method>Live.Clip.Clip.View.show_envelope()<Description>Method</Description></Method>

<Doc>	show_envelope( (View)arg1) -&gt; None : Show the envelope view. C++ signature :  void show_envelope(TPyViewData&lt;AClip&gt;)</Doc>

<Method>Live.Clip.Clip.View.show_loop()<Description>Method</Description></Method>

<Doc>	show_loop( (View)arg1) -&gt; None : Show the entire loop in the detail view. C++ signature :  void show_loop(TPyViewData&lt;AClip&gt;)</Doc>

<Class>Live.Clip.GridQuantization<Description>Class</Description></Class>

<Value>Live.Clip.GridQuantization.count<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_2_bars<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_4_bars<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_8_bars<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_bar<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_eighth<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_half<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_quarter<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_sixteenth<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.g_thirtysecond<Description>Value</Description></Value>

<Value>Live.Clip.GridQuantization.no_grid<Description>Value</Description></Value>

<Class>Live.Clip.WarpMode<Description>Class</Description></Class>

<Value>Live.Clip.WarpMode.beats<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.complex<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.complex_pro<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.count<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.repitch<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.rex<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.texture<Description>Value</Description></Value>

<Value>Live.Clip.WarpMode.tones<Description>Value</Description></Value>

<Module>Live.ClipSlot<Description>Module</Description></Module>

<Class>Live.ClipSlot.ClipSlot<Description>Class</Description></Class>

<Doc>	This class represents an entry in Lives Session view matrix.</Doc>

<Property>Live.ClipSlot.ClipSlot.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the ClipSlot.</Doc>

<Property>Live.ClipSlot.ClipSlot.clip<Description>Property</Description></Property>

<Doc>	Returns the Clip which this clipslots currently owns. Might be None.</Doc>

<Property>Live.ClipSlot.ClipSlot.color<Description>Property</Description></Property>

<Doc>	Returns the canonical color for the clip slot or None if it does not exist.</Doc>

<Property>Live.ClipSlot.ClipSlot.controls_other_clips<Description>Property</Description></Property>

<Doc>	Returns true if firing this slot will fire clips in other slots.Can only be true for slots in group tracks.</Doc>

<Property>Live.ClipSlot.ClipSlot.has_clip<Description>Property</Description></Property>

<Doc>	Returns true if this Clipslot owns a Clip.</Doc>

<Property>Live.ClipSlot.ClipSlot.has_stop_button<Description>Property</Description></Property>

<Doc>	Get/Set if this Clip has a stop button, which will, if fired, stop anyother Clip that is currently playing the Track we do belong to.</Doc>

<Property>Live.ClipSlot.ClipSlot.is_playing<Description>Property</Description></Property>

<Doc>	Returns whether the clip associated with the slot is playing.</Doc>

<Property>Live.ClipSlot.ClipSlot.is_recording<Description>Property</Description></Property>

<Doc>	Returns whether the clip associated with the slot is recording.</Doc>

<Property>Live.ClipSlot.ClipSlot.is_triggered<Description>Property</Description></Property>

<Doc>	Const access to the triggering state of the clip slot.</Doc>

<Property>Live.ClipSlot.ClipSlot.playing_status<Description>Property</Description></Property>

<Doc>	Const access to the playing state of the clip slot.Can be either stopped, playing, or recording.</Doc>

<Property>Live.ClipSlot.ClipSlot.will_record_on_start<Description>Property</Description></Property>

<Doc>	returns true if the clip slot will record on being fired.</Doc>

<Method>Live.ClipSlot.ClipSlot.add_color_listener()<Description>Method</Description></Method>

<Doc>	add_color_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.add_controls_other_clips_listener()<Description>Method</Description></Method>

<Doc>	add_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "controls_other_clips" has changed. C++ signature :  void add_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.add_has_clip_listener()<Description>Method</Description></Method>

<Doc>	add_has_clip_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_clip" has changed. C++ signature :  void add_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.add_has_stop_button_listener()<Description>Method</Description></Method>

<Doc>	add_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_stop_button" has changed. C++ signature :  void add_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.add_is_triggered_listener()<Description>Method</Description></Method>

<Doc>	add_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_triggered" has changed. C++ signature :  void add_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.add_playing_status_listener()<Description>Method</Description></Method>

<Doc>	add_playing_status_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_status" has changed. C++ signature :  void add_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.color_has_listener()<Description>Method</Description></Method>

<Doc>	color_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.controls_other_clips_has_listener()<Description>Method</Description></Method>

<Doc>	controls_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "controls_other_clips". C++ signature :  bool controls_other_clips_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.create_clip()<Description>Method</Description></Method>

<Doc>	create_clip( (ClipSlot)arg1, (float)arg2) -&gt; None : Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. C++ signature :  void create_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;,double)</Doc>

<Method>Live.ClipSlot.ClipSlot.delete_clip()<Description>Method</Description></Method>

<Doc>	delete_clip( (ClipSlot)arg1) -&gt; None : Removes the clip contained in the slot. Rises an exception if the slot was empty. C++ signature :  void delete_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>

<Method>Live.ClipSlot.ClipSlot.fire()<Description>Method</Description></Method>

<Doc>	fire( (ClipSlot)arg1) -&gt; None : Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. C++ signature :  void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt;)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) -&gt; None : If 'record_length' is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. 'launch_quantization' determines the quantization of global transport that is applied overriding the value in the song. 'force_legato' will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. C++ signature :  void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt; [,double=1.7976931348623157e+308 [,int=-2147483648 [,bool=False]]])</Doc>

<Method>Live.ClipSlot.ClipSlot.has_clip_has_listener()<Description>Method</Description></Method>

<Doc>	has_clip_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_clip". C++ signature :  bool has_clip_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.has_stop_button_has_listener()<Description>Method</Description></Method>

<Doc>	has_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_stop_button". C++ signature :  bool has_stop_button_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.is_triggered_has_listener()<Description>Method</Description></Method>

<Doc>	is_triggered_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_triggered". C++ signature :  bool is_triggered_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.playing_status_has_listener()<Description>Method</Description></Method>

<Doc>	playing_status_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_status". C++ signature :  bool playing_status_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.remove_color_listener()<Description>Method</Description></Method>

<Doc>	remove_color_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.remove_controls_other_clips_listener()<Description>Method</Description></Method>

<Doc>	remove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "controls_other_clips". C++ signature :  void remove_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.remove_has_clip_listener()<Description>Method</Description></Method>

<Doc>	remove_has_clip_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_clip". C++ signature :  void remove_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.remove_has_stop_button_listener()<Description>Method</Description></Method>

<Doc>	remove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_stop_button". C++ signature :  void remove_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.remove_is_triggered_listener()<Description>Method</Description></Method>

<Doc>	remove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_triggered". C++ signature :  void remove_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.remove_playing_status_listener()<Description>Method</Description></Method>

<Doc>	remove_playing_status_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_status". C++ signature :  void remove_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>

<Method>Live.ClipSlot.ClipSlot.set_fire_button_state()<Description>Method</Description></Method>

<Doc>	set_fire_button_state( (ClipSlot)arg1, (bool)arg2) -&gt; None : Set the clipslot's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AGroupAndClipSlotBase&gt;,bool)</Doc>

<Method>Live.ClipSlot.ClipSlot.stop()<Description>Method</Description></Method>

<Doc>	stop( (ClipSlot)arg1) -&gt; None : Stop playing the contained Clip, if there is a Clip and its currently playing. C++ signature :  void stop(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>

<Module>Live.Device<Description>Module</Description></Module>

<Class>Live.Device.Device<Description>Class</Description></Class>

<Doc>	This class represents a MIDI or Audio DSP-Device in Live.</Doc>

<Property>Live.Device.Device.can_have_chains<Description>Property</Description></Property>

<Doc>	Returns true if the device is a rack.</Doc>

<Property>Live.Device.Device.can_have_drum_pads<Description>Property</Description></Property>

<Doc>	Returns true if the device is a drum rack.</Doc>

<Property>Live.Device.Device.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the Device.</Doc>

<Property>Live.Device.Device.chains<Description>Property</Description></Property>

<Doc>	Return const access to the list of chains in this device. Throws an exception if can_have_chains is false.</Doc>

<Property>Live.Device.Device.class_display_name<Description>Property</Description></Property>

<Doc>	Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>

<Property>Live.Device.Device.class_name<Description>Property</Description></Property>

<Doc>	Return const access to the name of the device's class.</Doc>

<Property>Live.Device.Device.drum_pads<Description>Property</Description></Property>

<Doc>	Return const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc>

<Property>Live.Device.Device.has_drum_pads<Description>Property</Description></Property>

<Doc>	Returns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false.</Doc>

<Property>Live.Device.Device.name<Description>Property</Description></Property>

<Doc>	Return access to the name of the device.</Doc>

<Property>Live.Device.Device.parameters<Description>Property</Description></Property>

<Doc>	Const access to the list of available automatable parameters for this device.</Doc>

<Property>Live.Device.Device.return_chains<Description>Property</Description></Property>

<Doc>	Return const access to the list of return chains in this device. Throws an exception if can_have_chains is false.</Doc>

<Property>Live.Device.Device.type<Description>Property</Description></Property>

<Doc>	Return the type of the device.</Doc>

<Property>Live.Device.Device.view<Description>Property</Description></Property>

<Doc>	Representing the view aspects of a device.</Doc>

<Property>Live.Device.Device.visible_drum_pads<Description>Property</Description></Property>

<Doc>	Return const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc>

<Method>Live.Device.Device.add_chains_listener()<Description>Method</Description></Method>

<Doc>	add_chains_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.add_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	add_drum_pads_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads" has changed. C++ signature :  void add_drum_pads_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.add_has_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	add_has_drum_pads_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_drum_pads" has changed. C++ signature :  void add_has_drum_pads_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.add_parameters_listener()<Description>Method</Description></Method>

<Doc>	add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.add_return_chains_listener()<Description>Method</Description></Method>

<Doc>	add_return_chains_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_chains" has changed. C++ signature :  void add_return_chains_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.add_visible_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	add_visible_drum_pads_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_drum_pads" has changed. C++ signature :  void add_visible_drum_pads_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.chains_has_listener()<Description>Method</Description></Method>

<Doc>	chains_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.drum_pads_has_listener()<Description>Method</Description></Method>

<Doc>	drum_pads_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads". C++ signature :  bool drum_pads_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.get_bank_count()<Description>Method</Description></Method>

<Doc>	get_bank_count( (Device)arg1) -&gt; int : Get the number of parameter banks. This is related to hardware control surfaces. For Max devices only. C++ signature :  int get_bank_count(TPyHandle&lt;ADevice&gt;)</Doc>

<Method>Live.Device.Device.get_bank_name()<Description>Method</Description></Method>

<Doc>	get_bank_name( (Device)arg1, (int)arg2) -&gt; object : Get the name of a parameter bank given by index. This is related to hardware control surfaces. For Max devices only. C++ signature :  TString get_bank_name(TPyHandle&lt;ADevice&gt;,int)</Doc>

<Method>Live.Device.Device.get_bank_parameters()<Description>Method</Description></Method>

<Doc>	get_bank_parameters( (Device)arg1, (int)arg2) -&gt; list : Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. For Max devices only. C++ signature :  boost::python::list get_bank_parameters(TPyHandle&lt;ADevice&gt;,int)</Doc>

<Method>Live.Device.Device.has_drum_pads_has_listener()<Description>Method</Description></Method>

<Doc>	has_drum_pads_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_drum_pads". C++ signature :  bool has_drum_pads_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.parameters_has_listener()<Description>Method</Description></Method>

<Doc>	parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_chains_listener()<Description>Method</Description></Method>

<Doc>	remove_chains_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	remove_drum_pads_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads". C++ signature :  void remove_drum_pads_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_has_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	remove_has_drum_pads_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_drum_pads". C++ signature :  void remove_has_drum_pads_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_parameters_listener()<Description>Method</Description></Method>

<Doc>	remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_return_chains_listener()<Description>Method</Description></Method>

<Doc>	remove_return_chains_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_chains". C++ signature :  void remove_return_chains_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.remove_visible_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	remove_visible_drum_pads_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_drum_pads". C++ signature :  void remove_visible_drum_pads_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.return_chains_has_listener()<Description>Method</Description></Method>

<Doc>	return_chains_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_chains". C++ signature :  bool return_chains_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.store_chosen_bank()<Description>Method</Description></Method>

<Doc>	store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>

<Method>Live.Device.Device.visible_drum_pads_has_listener()<Description>Method</Description></Method>

<Doc>	visible_drum_pads_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_drum_pads". C++ signature :  bool visible_drum_pads_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Class>Live.Device.Device.View<Description>Class</Description></Class>

<Doc>	Representing the view aspects of a device.</Doc>

<Property>Live.Device.Device.View.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the View.</Doc>

<Property>Live.Device.Device.View.drum_pads_scroll_position<Description>Property</Description></Property>

<Doc>	Access to the index of the lowest visible row of pads. Throws an exception if can_have_drum_pads is false.</Doc>

<Property>Live.Device.Device.View.selected_chain<Description>Property</Description></Property>

<Doc>	Return access to the currently selected chain. Throws an exception if can_have_chains is false.</Doc>

<Property>Live.Device.Device.View.selected_drum_pad<Description>Property</Description></Property>

<Doc>	Return access to the currently selected drum pad. Throws an exception if can_have_drum_pads is false.</Doc>

<Method>Live.Device.Device.View.add_drum_pads_scroll_position_listener()<Description>Method</Description></Method>

<Doc>	add_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads_scroll_position" has changed. C++ signature :  void add_drum_pads_scroll_position_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.add_selected_chain_listener()<Description>Method</Description></Method>

<Doc>	add_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_chain" has changed. C++ signature :  void add_selected_chain_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.add_selected_drum_pad_listener()<Description>Method</Description></Method>

<Doc>	add_selected_drum_pad_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_drum_pad" has changed. C++ signature :  void add_selected_drum_pad_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.drum_pads_scroll_position_has_listener()<Description>Method</Description></Method>

<Doc>	drum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads_scroll_position". C++ signature :  bool drum_pads_scroll_position_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.remove_drum_pads_scroll_position_listener()<Description>Method</Description></Method>

<Doc>	remove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads_scroll_position". C++ signature :  void remove_drum_pads_scroll_position_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.remove_selected_chain_listener()<Description>Method</Description></Method>

<Doc>	remove_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_chain". C++ signature :  void remove_selected_chain_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.remove_selected_drum_pad_listener()<Description>Method</Description></Method>

<Doc>	remove_selected_drum_pad_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_drum_pad". C++ signature :  void remove_selected_drum_pad_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.selected_chain_has_listener()<Description>Method</Description></Method>

<Doc>	selected_chain_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_chain". C++ signature :  bool selected_chain_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.Device.Device.View.selected_drum_pad_has_listener()<Description>Method</Description></Method>

<Doc>	selected_drum_pad_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_drum_pad". C++ signature :  bool selected_drum_pad_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Class>Live.Device.DeviceType<Description>Class</Description></Class>

<Doc>	The type of the device.</Doc>

<Value>Live.Device.DeviceType.audio_effect<Description>Value</Description></Value>

<Doc>	The type of the device.</Doc>

<Value>Live.Device.DeviceType.instrument<Description>Value</Description></Value>

<Doc>	The type of the device.</Doc>

<Value>Live.Device.DeviceType.midi_effect<Description>Value</Description></Value>

<Doc>	The type of the device.</Doc>

<Value>Live.Device.DeviceType.undefined<Description>Value</Description></Value>

<Doc>	The type of the device.</Doc>

<Module>Live.DeviceParameter<Description>Module</Description></Module>

<Class>Live.DeviceParameter.AutomationState<Description>Class</Description></Class>

<Value>Live.DeviceParameter.AutomationState.none<Description>Value</Description></Value>

<Value>Live.DeviceParameter.AutomationState.overridden<Description>Value</Description></Value>

<Value>Live.DeviceParameter.AutomationState.playing<Description>Value</Description></Value>

<Class>Live.DeviceParameter.DeviceParameter<Description>Class</Description></Class>

<Doc>	This class represents a (automatable) parameter within a MIDI orAudio DSP-Device.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.automation_state<Description>Property</Description></Property>

<Doc>	Returns state of type AutomationState.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the device parameter.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.default_value<Description>Property</Description></Property>

<Doc>	Return the default value for this parameter.  A Default value is onlyavailable for non-quantized parameter types (see 'is_quantized').</Doc>

<Property>Live.DeviceParameter.DeviceParameter.is_enabled<Description>Property</Description></Property>

<Doc>	Returns false if the parameter has been macro mapped or disabled by Max.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.is_quantized<Description>Property</Description></Property>

<Doc>	Returns True, if this value is a boolean or integer like switch.Non quantized values are continues float values.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.max<Description>Property</Description></Property>

<Doc>	Returns const access to the upper value of the allowed range forthis parameter</Doc>

<Property>Live.DeviceParameter.DeviceParameter.min<Description>Property</Description></Property>

<Doc>	Returns const access to the lower value of the allowed range forthis parameter</Doc>

<Property>Live.DeviceParameter.DeviceParameter.name<Description>Property</Description></Property>

<Doc>	Returns const access the name of this parameter, as visible in Livesautomation choosers.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.original_name<Description>Property</Description></Property>

<Doc>	Returns const access the original name of this parameter, unaffected ofany renamings.</Doc>

<Property>Live.DeviceParameter.DeviceParameter.value<Description>Property</Description></Property>

<Doc>	Get/Set the current value (as visible in the GUI) this parameter.The value must be inside the min/max properties of this device.</Doc>

<Method>Live.DeviceParameter.DeviceParameter.add_automation_state_listener()<Description>Method</Description></Method>

<Doc>	add_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "automation_state" has changed. C++ signature :  void add_automation_state_listener(TPyHandle&lt;ATimeable&gt;,boost::python::api::object)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.add_value_listener()<Description>Method</Description></Method>

<Doc>	add_value_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "value" has changed. C++ signature :  void add_value_listener(TPyHandle&lt;ATimeable&gt;,boost::python::api::object)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.automation_state_has_listener()<Description>Method</Description></Method>

<Doc>	automation_state_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "automation_state". C++ signature :  bool automation_state_has_listener(TPyHandle&lt;ATimeable&gt;,boost::python::api::object)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.begin_gesture()<Description>Method</Description></Method>

<Doc>	begin_gesture( (DeviceParameter)arg1) -&gt; None : Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group -- for Sexample, when recording automation. C++ signature :  void begin_gesture(TPyHandle&lt;ATimeable&gt;)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.end_gesture()<Description>Method</Description></Method>

<Doc>	end_gesture( (DeviceParameter)arg1) -&gt; None : Notify the end of a modification of the parameter. See begin_gesture. C++ signature :  void end_gesture(TPyHandle&lt;ATimeable&gt;)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.re_enable_automation()<Description>Method</Description></Method>

<Doc>	re_enable_automation( (DeviceParameter)arg1) -&gt; None : Reenable automation for this parameter. C++ signature :  void re_enable_automation(TPyHandle&lt;ATimeable&gt;)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.remove_automation_state_listener()<Description>Method</Description></Method>

<Doc>	remove_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "automation_state". C++ signature :  void remove_automation_state_listener(TPyHandle&lt;ATimeable&gt;,boost::python::api::object)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.remove_value_listener()<Description>Method</Description></Method>

<Doc>	remove_value_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "value". C++ signature :  void remove_value_listener(TPyHandle&lt;ATimeable&gt;,boost::python::api::object)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.str_for_value()<Description>Method</Description></Method>

<Doc>	str_for_value( (DeviceParameter)arg1, (float)arg2) -&gt; object : Return a string representation of the given value. To be used for display purposes only.  This value can include characters like 'db' or 'hz', depending on the type of the parameter. C++ signature :  TString str_for_value(TPyHandle&lt;ATimeable&gt;,float)</Doc>

<Method>Live.DeviceParameter.DeviceParameter.value_has_listener()<Description>Method</Description></Method>

<Doc>	value_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "value". C++ signature :  bool value_has_listener(TPyHandle&lt;ATimeable&gt;,boost::python::api::object)</Doc>

<Module>Live.DrumPad<Description>Module</Description></Module>

<Class>Live.DrumPad.DrumPad<Description>Class</Description></Class>

<Doc>	This class represents a drum group device pad in Live.</Doc>

<Property>Live.DrumPad.DrumPad.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the drum pad.</Doc>

<Property>Live.DrumPad.DrumPad.chains<Description>Property</Description></Property>

<Doc>	Return const access to the list of chains in this drum pad.</Doc>

<Property>Live.DrumPad.DrumPad.mute<Description>Property</Description></Property>

<Doc>	Mute/unmute the pad.</Doc>

<Property>Live.DrumPad.DrumPad.name<Description>Property</Description></Property>

<Doc>	Return const access to the drum pad's name. It depends on the contained chains.</Doc>

<Property>Live.DrumPad.DrumPad.note<Description>Property</Description></Property>

<Doc>	Get the MIDI note of the drum pad.</Doc>

<Property>Live.DrumPad.DrumPad.solo<Description>Property</Description></Property>

<Doc>	Solo/unsolo the pad.</Doc>

<Method>Live.DrumPad.DrumPad.add_chains_listener()<Description>Method</Description></Method>

<Doc>	add_chains_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.add_mute_listener()<Description>Method</Description></Method>

<Doc>	add_mute_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.add_solo_listener()<Description>Method</Description></Method>

<Doc>	add_solo_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.chains_has_listener()<Description>Method</Description></Method>

<Doc>	chains_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.mute_has_listener()<Description>Method</Description></Method>

<Doc>	mute_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.remove_chains_listener()<Description>Method</Description></Method>

<Doc>	remove_chains_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.remove_mute_listener()<Description>Method</Description></Method>

<Doc>	remove_mute_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.remove_solo_listener()<Description>Method</Description></Method>

<Doc>	remove_solo_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Method>Live.DrumPad.DrumPad.solo_has_listener()<Description>Method</Description></Method>

<Doc>	solo_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>

<Module>Live.Listener<Description>Module</Description></Module>

<Class>Live.Listener.ListenerHandle<Description>Class</Description></Class>

<Doc>	This class represents a Python listener when connected to a Live property.</Doc>

<Property>Live.Listener.ListenerHandle.name<Description>Property</Description></Property>

<Doc>	Prints the name of the property that this listener is connected to</Doc>

<Method>Live.Listener.ListenerHandle.disconnect()<Description>Method</Description></Method>

<Doc>	disconnect( (ListenerHandle)arg1) -&gt; None : Disconnects the listener from its property C++ signature :  void disconnect(LPythonRemote {lvalue})</Doc>

<Module>Live.LomObject<Description>Module</Description></Module>

<Class>Live.LomObject.LomObject<Description>Class</Description></Class>

<Doc>	this is the base class for an object that is accessible via the LOM</Doc>

<Module>Live.MidiMap<Description>Module</Description></Module>

<Built-In>Live.MidiMap.forward_midi_cc()<Description>Built-In</Description></Built-In>

<Doc>	forward_midi_cc( (int)arg1, (int)arg2, (int)arg3, (int)arg4) -&gt; bool : C++ signature :  bool forward_midi_cc(unsigned int,unsigned int,int,int)</Doc>

<Built-In>Live.MidiMap.forward_midi_note()<Description>Built-In</Description></Built-In>

<Doc>	forward_midi_note( (int)arg1, (int)arg2, (int)arg3, (int)arg4) -&gt; bool : C++ signature :  bool forward_midi_note(unsigned int,unsigned int,int,int)</Doc>

<Built-In>Live.MidiMap.forward_midi_pitchbend()<Description>Built-In</Description></Built-In>

<Doc>	forward_midi_pitchbend( (int)arg1, (int)arg2, (int)arg3) -&gt; bool : C++ signature :  bool forward_midi_pitchbend(unsigned int,unsigned int,int)</Doc>

<Built-In>Live.MidiMap.map_midi_cc()<Description>Built-In</Description></Built-In>

<Doc>	map_midi_cc( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (bool)avoid_takeover [, (float)sensitivity=1.0]) -&gt; bool : C++ signature :  bool map_midi_cc(unsigned int,TPyHandle&lt;ATimeable&gt;,int,int,NRemoteMapperTypes::TControllerMapMode,bool [,float=1.0])</Doc>

<Built-In>Live.MidiMap.map_midi_cc_with_feedback_map()<Description>Built-In</Description></Built-In>

<Doc>	map_midi_cc_with_feedback_map( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (CCFeedbackRule)feedback_rule, (bool)avoid_takeover [, (float)sensitivity=1.0]) -&gt; bool : C++ signature :  bool map_midi_cc_with_feedback_map(unsigned int,TPyHandle&lt;ATimeable&gt;,int,int,NRemoteMapperTypes::TControllerMapMode,NPythonMidiMap::TCCFeedbackRule,bool [,float=1.0])</Doc>

<Built-In>Live.MidiMap.map_midi_note()<Description>Built-In</Description></Built-In>

<Doc>	map_midi_note( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4) -&gt; bool : C++ signature :  bool map_midi_note(unsigned int,TPyHandle&lt;ATimeable&gt;,int,int)</Doc>

<Built-In>Live.MidiMap.map_midi_note_with_feedback_map()<Description>Built-In</Description></Built-In>

<Doc>	map_midi_note_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (object)arg5) -&gt; bool : C++ signature :  bool map_midi_note_with_feedback_map(unsigned int,TPyHandle&lt;ATimeable&gt;,int,int,NPythonMidiMap::TNoteFeedbackRule)</Doc>

<Built-In>Live.MidiMap.map_midi_pitchbend()<Description>Built-In</Description></Built-In>

<Doc>	map_midi_pitchbend( (int)arg1, (DeviceParameter)arg2, (int)arg3, (bool)arg4) -&gt; bool : C++ signature :  bool map_midi_pitchbend(unsigned int,TPyHandle&lt;ATimeable&gt;,int,bool)</Doc>

<Built-In>Live.MidiMap.map_midi_pitchbend_with_feedback_map()<Description>Built-In</Description></Built-In>

<Doc>	map_midi_pitchbend_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (PitchBendFeedbackRule)arg4, (bool)arg5) -&gt; bool : C++ signature :  bool map_midi_pitchbend_with_feedback_map(unsigned int,TPyHandle&lt;ATimeable&gt;,int,NPythonMidiMap::TPitchBendFeedbackRule,bool)</Doc>

<Built-In>Live.MidiMap.send_feedback_for_parameter()<Description>Built-In</Description></Built-In>

<Doc>	send_feedback_for_parameter( (int)arg1, (DeviceParameter)arg2) -&gt; None : C++ signature :  void send_feedback_for_parameter(unsigned int,TPyHandle&lt;ATimeable&gt;)</Doc>

<Class>Live.MidiMap.CCFeedbackRule<Description>Class</Description></Class>

<Doc>	Structure to define feedback properties of MIDI mappings.</Doc>

<Property>Live.MidiMap.CCFeedbackRule.cc_no<Description>Property</Description></Property>

<Property>Live.MidiMap.CCFeedbackRule.cc_value_map<Description>Property</Description></Property>

<Property>Live.MidiMap.CCFeedbackRule.channel<Description>Property</Description></Property>

<Property>Live.MidiMap.CCFeedbackRule.delay_in_ms<Description>Property</Description></Property>

<Class>Live.MidiMap.MapMode<Description>Class</Description></Class>

<Value>Live.MidiMap.MapMode.absolute<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.absolute_14_bit<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_binary_offset<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_signed_bit<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_signed_bit2<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_smooth_binary_offset<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_smooth_signed_bit<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_smooth_signed_bit2<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_smooth_two_compliment<Description>Value</Description></Value>

<Value>Live.MidiMap.MapMode.relative_two_compliment<Description>Value</Description></Value>

<Class>Live.MidiMap.PitchBendFeedbackRule<Description>Class</Description></Class>

<Doc>	Structure to define feedback properties of MIDI mappings.</Doc>

<Property>Live.MidiMap.PitchBendFeedbackRule.channel<Description>Property</Description></Property>

<Property>Live.MidiMap.PitchBendFeedbackRule.delay_in_ms<Description>Property</Description></Property>

<Property>Live.MidiMap.PitchBendFeedbackRule.value_pair_map<Description>Property</Description></Property>

<Module>Live.MixerDevice<Description>Module</Description></Module>

<Class>Live.MixerDevice.MixerDevice<Description>Class</Description></Class>

<Doc>	This class represents a Mixer Device in Live, which gives youaccess to the Volume and Panning properties of a Track.</Doc>

<Property>Live.MixerDevice.MixerDevice.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the mixer device.</Doc>

<Property>Live.MixerDevice.MixerDevice.crossfade_assign<Description>Property</Description></Property>

<Doc>	Player- and ReturnTracks only: Const access to the Track's Crossfade Assign State.</Doc>

<Property>Live.MixerDevice.MixerDevice.crossfader<Description>Property</Description></Property>

<Doc>	MasterTrack only: Const access to the Crossfader.</Doc>

<Property>Live.MixerDevice.MixerDevice.cue_volume<Description>Property</Description></Property>

<Doc>	MasterTrack only: Const access to the Cue Volume Parameter.</Doc>

<Property>Live.MixerDevice.MixerDevice.panning<Description>Property</Description></Property>

<Doc>	Const access to the Tracks Panning Device Parameter.</Doc>

<Property>Live.MixerDevice.MixerDevice.sends<Description>Property</Description></Property>

<Doc>	Const access to the Tracks list of Send Amount Device Parameters.</Doc>

<Property>Live.MixerDevice.MixerDevice.song_tempo<Description>Property</Description></Property>

<Doc>	MasterTrack only: Const access to the Song's Tempo.</Doc>

<Property>Live.MixerDevice.MixerDevice.track_activator<Description>Property</Description></Property>

<Doc>	Const access to the Tracks Activator Device Parameter.</Doc>

<Property>Live.MixerDevice.MixerDevice.volume<Description>Property</Description></Property>

<Doc>	Const access to the Tracks Volume Device Parameter.</Doc>

<Method>Live.MixerDevice.MixerDevice.add_crossfade_assign_listener()<Description>Method</Description></Method>

<Doc>	add_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "crossfade_assign" has changed. C++ signature :  void add_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.MixerDevice.MixerDevice.add_sends_listener()<Description>Method</Description></Method>

<Doc>	add_sends_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sends" has changed. C++ signature :  void add_sends_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.MixerDevice.MixerDevice.crossfade_assign_has_listener()<Description>Method</Description></Method>

<Doc>	crossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "crossfade_assign". C++ signature :  bool crossfade_assign_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.MixerDevice.MixerDevice.remove_crossfade_assign_listener()<Description>Method</Description></Method>

<Doc>	remove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "crossfade_assign". C++ signature :  void remove_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.MixerDevice.MixerDevice.remove_sends_listener()<Description>Method</Description></Method>

<Doc>	remove_sends_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sends". C++ signature :  void remove_sends_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>

<Method>Live.MixerDevice.MixerDevice.sends_has_listener()<Description>Method</Description></Method>

<Doc>	sends_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sends". C++ signature :  bool sends_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>

<Sub-Class>Live.MixerDevice.MixerDevice.crossfade_assignments<Description>Sub-Class</Description></Sub-Class>

<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.A<Description>Value</Description></Value>

<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.B<Description>Value</Description></Value>

<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.NONE<Description>Value</Description></Value>

<Module>Live.Scene<Description>Module</Description></Module>

<Class>Live.Scene.Scene<Description>Class</Description></Class>

<Doc>	This class represents an series of ClipSlots in Lives Sessionview matrix.</Doc>

<Property>Live.Scene.Scene.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the scene.</Doc>

<Property>Live.Scene.Scene.clip_slots<Description>Property</Description></Property>

<Doc>	return a list of clipslots (see class AClipSlot) that this scene covers.</Doc>

<Property>Live.Scene.Scene.color<Description>Property</Description></Property>

<Doc>	Get/set access to the color of the Scene (RGB).</Doc>

<Property>Live.Scene.Scene.is_empty<Description>Property</Description></Property>

<Doc>	Returns True if all clip slots of this scene are empty.</Doc>

<Property>Live.Scene.Scene.is_triggered<Description>Property</Description></Property>

<Doc>	Const access to the scene's trigger state.</Doc>

<Property>Live.Scene.Scene.name<Description>Property</Description></Property>

<Doc>	Get/Set the name of the scene. Might contain the substring BPM, whichidentifies that the scene will change the tempo when fireed. To Get/Setthe temp, use the 'tempo' property of the scene.</Doc>

<Property>Live.Scene.Scene.tempo<Description>Property</Description></Property>

<Doc>	Get/Set the the tempo value of the scene.The Song will use the Scenes tempo as soon as the Scene is fired.Returns -1 if the Scene has no tempo propery.</Doc>

<Method>Live.Scene.Scene.add_clip_slots_listener()<Description>Method</Description></Method>

<Doc>	add_clip_slots_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.add_color_listener()<Description>Method</Description></Method>

<Doc>	add_color_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.add_is_triggered_listener()<Description>Method</Description></Method>

<Doc>	add_is_triggered_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_triggered" has changed. C++ signature :  void add_is_triggered_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.clip_slots_has_listener()<Description>Method</Description></Method>

<Doc>	clip_slots_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.color_has_listener()<Description>Method</Description></Method>

<Doc>	color_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.fire()<Description>Method</Description></Method>

<Doc>	fire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) -&gt; None : Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. C++ signature :  void fire(TPyHandle&lt;AScene&gt; [,bool=False [,bool=True]])</Doc>

<Method>Live.Scene.Scene.fire_as_selected()<Description>Method</Description></Method>

<Doc>	fire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) -&gt; None : Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. C++ signature :  void fire_as_selected(TPyHandle&lt;AScene&gt; [,bool=False])</Doc>

<Method>Live.Scene.Scene.is_triggered_has_listener()<Description>Method</Description></Method>

<Doc>	is_triggered_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_triggered". C++ signature :  bool is_triggered_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.remove_clip_slots_listener()<Description>Method</Description></Method>

<Doc>	remove_clip_slots_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.remove_color_listener()<Description>Method</Description></Method>

<Doc>	remove_color_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.remove_is_triggered_listener()<Description>Method</Description></Method>

<Doc>	remove_is_triggered_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_triggered". C++ signature :  void remove_is_triggered_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>

<Method>Live.Scene.Scene.set_fire_button_state()<Description>Method</Description></Method>

<Doc>	set_fire_button_state( (Scene)arg1, (bool)arg2) -&gt; None : Set the scene's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AScene&gt;,bool)</Doc>

<Module>Live.Song<Description>Module</Description></Module>

<Class>Live.Song.BeatTime<Description>Class</Description></Class>

<Doc>	Represents a Time, splitted into Bars, Beats, SubDivision and Ticks.</Doc>

<Property>Live.Song.BeatTime.bars<Description>Property</Description></Property>

<Property>Live.Song.BeatTime.beats<Description>Property</Description></Property>

<Property>Live.Song.BeatTime.sub_division<Description>Property</Description></Property>

<Property>Live.Song.BeatTime.ticks<Description>Property</Description></Property>

<Class>Live.Song.CaptureMode<Description>Class</Description></Class>

<Doc>	The capture mode that is used for capture and insert scene.</Doc>

<Value>Live.Song.CaptureMode.all<Description>Value</Description></Value>

<Doc>	The capture mode that is used for capture and insert scene.</Doc>

<Value>Live.Song.CaptureMode.all_except_selected<Description>Value</Description></Value>

<Doc>	The capture mode that is used for capture and insert scene.</Doc>

<Class>Live.Song.CuePoint<Description>Class</Description></Class>

<Doc>	Represents a 'Marker' in the arrangement.</Doc>

<Property>Live.Song.CuePoint.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the cue point.</Doc>

<Property>Live.Song.CuePoint.name<Description>Property</Description></Property>

<Doc>	Get/Listen to the name of this CuePoint, as visible in the arranger.</Doc>

<Property>Live.Song.CuePoint.time<Description>Property</Description></Property>

<Doc>	Get/Listen to the CuePoint's time in beats.</Doc>

<Method>Live.Song.CuePoint.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.CuePoint.add_time_listener()<Description>Method</Description></Method>

<Doc>	add_time_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time" has changed. C++ signature :  void add_time_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.CuePoint.jump()<Description>Method</Description></Method>

<Doc>	jump( (CuePoint)arg1) -&gt; None : When the Song is playing, set the playing-position quantized to this Cuepoint's time. When not playing, simply move the start playing position. C++ signature :  void jump(TPyHandle&lt;ACuePoint&gt;)</Doc>

<Method>Live.Song.CuePoint.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (CuePoint)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.CuePoint.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.CuePoint.remove_time_listener()<Description>Method</Description></Method>

<Doc>	remove_time_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time". C++ signature :  void remove_time_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.CuePoint.time_has_listener()<Description>Method</Description></Method>

<Doc>	time_has_listener( (CuePoint)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time". C++ signature :  bool time_has_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>

<Class>Live.Song.Quantization<Description>Class</Description></Class>

<Value>Live.Song.Quantization.q_2_bars<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_4_bars<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_8_bars<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_bar<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_eight<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_eight_triplet<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_half<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_half_triplet<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_no_q<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_quarter<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_quarter_triplet<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_sixtenth<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_sixtenth_triplet<Description>Value</Description></Value>

<Value>Live.Song.Quantization.q_thirtytwoth<Description>Value</Description></Value>

<Class>Live.Song.RecordingQuantization<Description>Class</Description></Class>

<Value>Live.Song.RecordingQuantization.rec_q_eight<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_eight_eight_triplet<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_eight_triplet<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_no_q<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_quarter<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_sixtenth<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_sixtenth_sixtenth_triplet<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_sixtenth_triplet<Description>Value</Description></Value>

<Value>Live.Song.RecordingQuantization.rec_q_thirtysecond<Description>Value</Description></Value>

<Class>Live.Song.SessionRecordStatus<Description>Class</Description></Class>

<Value>Live.Song.SessionRecordStatus.off<Description>Value</Description></Value>

<Value>Live.Song.SessionRecordStatus.on<Description>Value</Description></Value>

<Value>Live.Song.SessionRecordStatus.transition<Description>Value</Description></Value>

<Class>Live.Song.SmptTime<Description>Class</Description></Class>

<Doc>	Represents a Time, split into Hours, Minutes, Seconds and Frames.The frame type must be specified when calling a function that returnsa SmptTime.</Doc>

<Property>Live.Song.SmptTime.frames<Description>Property</Description></Property>

<Property>Live.Song.SmptTime.hours<Description>Property</Description></Property>

<Property>Live.Song.SmptTime.minutes<Description>Property</Description></Property>

<Property>Live.Song.SmptTime.seconds<Description>Property</Description></Property>

<Class>Live.Song.Song<Description>Class</Description></Class>

<Doc>	This class represents a Live set.</Doc>

<Property>Live.Song.Song.appointed_device<Description>Property</Description></Property>

<Doc>	Access to the selected Device</Doc>

<Property>Live.Song.Song.arrangement_overdub<Description>Property</Description></Property>

<Doc>	Get/Set the global arrangement overdub state.</Doc>

<Property>Live.Song.Song.back_to_arranger<Description>Property</Description></Property>

<Doc>	Get/Set if triggering a Clip in the Session, disabled the playback ofClips in the Arranger.</Doc>

<Property>Live.Song.Song.can_jump_to_next_cue<Description>Property</Description></Property>

<Doc>	Returns true when there is a cue marker right to the playing pos thatwe could jump to.</Doc>

<Property>Live.Song.Song.can_jump_to_prev_cue<Description>Property</Description></Property>

<Doc>	Returns true when there is a cue marker left to the playing pos thatwe could jump to.</Doc>

<Property>Live.Song.Song.can_redo<Description>Property</Description></Property>

<Doc>	Returns true if there is an undone action that we can redo.</Doc>

<Property>Live.Song.Song.can_undo<Description>Property</Description></Property>

<Doc>	Returns true if there is an action that we can restore.</Doc>

<Property>Live.Song.Song.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the song.</Doc>

<Property>Live.Song.Song.clip_trigger_quantization<Description>Property</Description></Property>

<Doc>	Get/Set access to the quantization settings that are used to fireClips in the Session.</Doc>

<Property>Live.Song.Song.cue_points<Description>Property</Description></Property>

<Doc>	Const access to a list of all cue points of the Live Song.</Doc>

<Property>Live.Song.Song.current_song_time<Description>Property</Description></Property>

<Doc>	Get/Set access to the songs current playing position in ms.</Doc>

<Property>Live.Song.Song.exclusive_arm<Description>Property</Description></Property>

<Doc>	Get if Tracks should be armed exclusively by default.</Doc>

<Property>Live.Song.Song.exclusive_solo<Description>Property</Description></Property>

<Doc>	Get if Tracks should be soloed exclusively by default.</Doc>

<Property>Live.Song.Song.groove_amount<Description>Property</Description></Property>

<Doc>	Get/Set the global groove amount, that adjust all setup groovesin all clips.</Doc>

<Property>Live.Song.Song.is_playing<Description>Property</Description></Property>

<Doc>	Returns true if the Song is currently playing.</Doc>

<Property>Live.Song.Song.last_event_time<Description>Property</Description></Property>

<Doc>	Return the time of the last set event in the song. In contrary tosong_length, this will not add some extra beats that are mostly neededfor Display purposes in the Arrangerview.</Doc>

<Property>Live.Song.Song.loop<Description>Property</Description></Property>

<Doc>	Get/Set the the looping flag that en/disables the usage of the globalloop markers in the song.</Doc>

<Property>Live.Song.Song.loop_length<Description>Property</Description></Property>

<Doc>	Get/Set the lenght of the global loop marker position in beats.</Doc>

<Property>Live.Song.Song.loop_start<Description>Property</Description></Property>

<Doc>	Get/Set the start of the global loop marker position in beats.</Doc>

<Property>Live.Song.Song.master_track<Description>Property</Description></Property>

<Doc>	Access to the Master Track (always available)</Doc>

<Property>Live.Song.Song.metronome<Description>Property</Description></Property>

<Doc>	Get/Set if the metronom is audible.</Doc>

<Property>Live.Song.Song.midi_recording_quantization<Description>Property</Description></Property>

<Doc>	Get/Set access to the settings that are used to quantizeMIDI recordings.</Doc>

<Property>Live.Song.Song.nudge_down<Description>Property</Description></Property>

<Doc>	Get/Set the status of the nudge down button.</Doc>

<Property>Live.Song.Song.nudge_up<Description>Property</Description></Property>

<Doc>	Get/Set the status of the nudge up button.</Doc>

<Property>Live.Song.Song.overdub<Description>Property</Description></Property>

<Doc>	Legacy hook for Live 8 overdub state. Now hooks tosession record.</Doc>

<Property>Live.Song.Song.punch_in<Description>Property</Description></Property>

<Doc>	Get/Set the flag that will enable recording as soon as the Song playsand hits the global loop start region.</Doc>

<Property>Live.Song.Song.punch_out<Description>Property</Description></Property>

<Doc>	Get/Set the flag that will disable recording as soon as the Song playsand hits the global loop end region.</Doc>

<Property>Live.Song.Song.re_enable_automation_enabled<Description>Property</Description></Property>

<Doc>	Returns true if some automated parameter has been overriden</Doc>

<Property>Live.Song.Song.record_mode<Description>Property</Description></Property>

<Doc>	Get/Set the state of the global recording flag.</Doc>

<Property>Live.Song.Song.return_tracks<Description>Property</Description></Property>

<Doc>	Const access to the list of available Return Tracks.</Doc>

<Property>Live.Song.Song.scenes<Description>Property</Description></Property>

<Doc>	Const access to a list of all Scenes in the Live Song.</Doc>

<Property>Live.Song.Song.select_on_launch<Description>Property</Description></Property>

<Doc>	Get if Scenes and Clips should be selected when fired.</Doc>

<Property>Live.Song.Song.session_automation_record<Description>Property</Description></Property>

<Doc>	Returns true if automation recording is enabled.</Doc>

<Property>Live.Song.Song.session_record<Description>Property</Description></Property>

<Doc>	Get/Set the session record state.</Doc>

<Property>Live.Song.Song.session_record_status<Description>Property</Description></Property>

<Doc>	Get the session slot-recording state.</Doc>

<Property>Live.Song.Song.signature_denominator<Description>Property</Description></Property>

<Doc>	Get/Set access to the global signature denominator of the Song.</Doc>

<Property>Live.Song.Song.signature_numerator<Description>Property</Description></Property>

<Doc>	Get/Set access to the global signature numerator of the Song.</Doc>

<Property>Live.Song.Song.song_length<Description>Property</Description></Property>

<Doc>	Return the time of the last set event in the song, plus som extra beatsthat are usually added for better navigation in the arrangerview.</Doc>

<Property>Live.Song.Song.swing_amount<Description>Property</Description></Property>

<Doc>	Get/Set access to the amount of swing that is applied when adding or quantizing notes to MIDI clips</Doc>

<Property>Live.Song.Song.tempo<Description>Property</Description></Property>

<Doc>	Get/Set the global project tempo.</Doc>

<Property>Live.Song.Song.tracks<Description>Property</Description></Property>

<Doc>	Const access to a list of all Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc>

<Property>Live.Song.Song.view<Description>Property</Description></Property>

<Doc>	Representing the view aspects of a Live document: The Session and Arrangerview.</Doc>

<Property>Live.Song.Song.visible_tracks<Description>Property</Description></Property>

<Doc>	Const access to a list of all visible Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc>

<Method>Live.Song.Song.add_appointed_device_listener()<Description>Method</Description></Method>

<Doc>	add_appointed_device_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "appointed_device" has changed. C++ signature :  void add_appointed_device_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_arrangement_overdub_listener()<Description>Method</Description></Method>

<Doc>	add_arrangement_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_overdub" has changed. C++ signature :  void add_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_back_to_arranger_listener()<Description>Method</Description></Method>

<Doc>	add_back_to_arranger_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "back_to_arranger" has changed. C++ signature :  void add_back_to_arranger_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_can_jump_to_next_cue_listener()<Description>Method</Description></Method>

<Doc>	add_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_jump_to_next_cue" has changed. C++ signature :  void add_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_can_jump_to_prev_cue_listener()<Description>Method</Description></Method>

<Doc>	add_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_jump_to_prev_cue" has changed. C++ signature :  void add_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_clip_trigger_quantization_listener()<Description>Method</Description></Method>

<Doc>	add_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_trigger_quantization" has changed. C++ signature :  void add_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_cue_points_listener()<Description>Method</Description></Method>

<Doc>	add_cue_points_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "cue_points" has changed. C++ signature :  void add_cue_points_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_current_song_time_listener()<Description>Method</Description></Method>

<Doc>	add_current_song_time_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_song_time" has changed. C++ signature :  void add_current_song_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_exclusive_arm_listener()<Description>Method</Description></Method>

<Doc>	add_exclusive_arm_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "exclusive_arm" has changed. C++ signature :  void add_exclusive_arm_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_groove_amount_listener()<Description>Method</Description></Method>

<Doc>	add_groove_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "groove_amount" has changed. C++ signature :  void add_groove_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_is_playing_listener()<Description>Method</Description></Method>

<Doc>	add_is_playing_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_playing" has changed. C++ signature :  void add_is_playing_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_loop_length_listener()<Description>Method</Description></Method>

<Doc>	add_loop_length_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_length" has changed. C++ signature :  void add_loop_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_loop_listener()<Description>Method</Description></Method>

<Doc>	add_loop_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop" has changed. C++ signature :  void add_loop_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_loop_start_listener()<Description>Method</Description></Method>

<Doc>	add_loop_start_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_start" has changed. C++ signature :  void add_loop_start_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_metronome_listener()<Description>Method</Description></Method>

<Doc>	add_metronome_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "metronome" has changed. C++ signature :  void add_metronome_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_midi_recording_quantization_listener()<Description>Method</Description></Method>

<Doc>	add_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_recording_quantization" has changed. C++ signature :  void add_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_nudge_down_listener()<Description>Method</Description></Method>

<Doc>	add_nudge_down_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "nudge_down" has changed. C++ signature :  void add_nudge_down_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_nudge_up_listener()<Description>Method</Description></Method>

<Doc>	add_nudge_up_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "nudge_up" has changed. C++ signature :  void add_nudge_up_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_overdub_listener()<Description>Method</Description></Method>

<Doc>	add_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "overdub" has changed. C++ signature :  void add_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_punch_in_listener()<Description>Method</Description></Method>

<Doc>	add_punch_in_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "punch_in" has changed. C++ signature :  void add_punch_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_punch_out_listener()<Description>Method</Description></Method>

<Doc>	add_punch_out_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "punch_out" has changed. C++ signature :  void add_punch_out_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_re_enable_automation_enabled_listener()<Description>Method</Description></Method>

<Doc>	add_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "re_enable_automation_enabled" has changed. C++ signature :  void add_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_record_mode_listener()<Description>Method</Description></Method>

<Doc>	add_record_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "record_mode" has changed. C++ signature :  void add_record_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_return_tracks_listener()<Description>Method</Description></Method>

<Doc>	add_return_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_tracks" has changed. C++ signature :  void add_return_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_scenes_listener()<Description>Method</Description></Method>

<Doc>	add_scenes_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scenes" has changed. C++ signature :  void add_scenes_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_session_automation_record_listener()<Description>Method</Description></Method>

<Doc>	add_session_automation_record_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_automation_record" has changed. C++ signature :  void add_session_automation_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_session_record_listener()<Description>Method</Description></Method>

<Doc>	add_session_record_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_record" has changed. C++ signature :  void add_session_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_session_record_status_listener()<Description>Method</Description></Method>

<Doc>	add_session_record_status_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_record_status" has changed. C++ signature :  void add_session_record_status_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_signature_denominator_listener()<Description>Method</Description></Method>

<Doc>	add_signature_denominator_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_denominator" has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_signature_numerator_listener()<Description>Method</Description></Method>

<Doc>	add_signature_numerator_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_numerator" has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_song_length_listener()<Description>Method</Description></Method>

<Doc>	add_song_length_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "song_length" has changed. C++ signature :  void add_song_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_swing_amount_listener()<Description>Method</Description></Method>

<Doc>	add_swing_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "swing_amount" has changed. C++ signature :  void add_swing_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_tempo_listener()<Description>Method</Description></Method>

<Doc>	add_tempo_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_tracks_listener()<Description>Method</Description></Method>

<Doc>	add_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tracks" has changed. C++ signature :  void add_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.add_visible_tracks_listener()<Description>Method</Description></Method>

<Doc>	add_visible_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_tracks" has changed. C++ signature :  void add_visible_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.appointed_device_has_listener()<Description>Method</Description></Method>

<Doc>	appointed_device_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "appointed_device". C++ signature :  bool appointed_device_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.arrangement_overdub_has_listener()<Description>Method</Description></Method>

<Doc>	arrangement_overdub_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_overdub". C++ signature :  bool arrangement_overdub_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.back_to_arranger_has_listener()<Description>Method</Description></Method>

<Doc>	back_to_arranger_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "back_to_arranger". C++ signature :  bool back_to_arranger_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.begin_undo_step()<Description>Method</Description></Method>

<Doc>	begin_undo_step( (Song)arg1) -&gt; None : C++ signature :  void begin_undo_step(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.can_jump_to_next_cue_has_listener()<Description>Method</Description></Method>

<Doc>	can_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_jump_to_next_cue". C++ signature :  bool can_jump_to_next_cue_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.can_jump_to_prev_cue_has_listener()<Description>Method</Description></Method>

<Doc>	can_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_jump_to_prev_cue". C++ signature :  bool can_jump_to_prev_cue_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.capture_and_insert_scene()<Description>Method</Description></Method>

<Doc>	capture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) -&gt; None : Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. C++ signature :  void capture_and_insert_scene(TPyHandle&lt;ASong&gt; [,int=Song.CaptureMode.all])</Doc>

<Method>Live.Song.Song.clip_trigger_quantization_has_listener()<Description>Method</Description></Method>

<Doc>	clip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_trigger_quantization". C++ signature :  bool clip_trigger_quantization_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.continue_playing()<Description>Method</Description></Method>

<Doc>	continue_playing( (Song)arg1) -&gt; None : Continue playing the song from the current position C++ signature :  void continue_playing(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.create_audio_track()<Description>Method</Description></Method>

<Doc>	create_audio_track( (Song)arg1, (int)arg2) -&gt; None : Create a new audio track at the given index. If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised. C++ signature :  void create_audio_track(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.create_midi_track()<Description>Method</Description></Method>

<Doc>	create_midi_track( (Song)arg1, (int)arg2) -&gt; None : Create a new midi track at the given index. If the index is -1, the new track is added at the end. It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised. C++ signature :  void create_midi_track(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.create_return_track()<Description>Method</Description></Method>

<Doc>	create_return_track( (Song)arg1) -&gt; None : Create a new return track at the end. If the new track would exceed  the limitations, a limitation error is raised. C++ signature :  void create_return_track(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.create_scene()<Description>Method</Description></Method>

<Doc>	create_scene( (Song)arg1, (int)arg2) -&gt; Scene : Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AScene&gt; &gt; create_scene(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.cue_points_has_listener()<Description>Method</Description></Method>

<Doc>	cue_points_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "cue_points". C++ signature :  bool cue_points_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.current_song_time_has_listener()<Description>Method</Description></Method>

<Doc>	current_song_time_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_song_time". C++ signature :  bool current_song_time_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.delete_scene()<Description>Method</Description></Method>

<Doc>	delete_scene( (Song)arg1, (int)arg2) -&gt; None : Delete the scene with the given index. If no scene with this index exists, an exception will be raised. C++ signature :  void delete_scene(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.delete_track()<Description>Method</Description></Method>

<Doc>	delete_track( (Song)arg1, (int)arg2) -&gt; None : Delete the track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_track(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.duplicate_scene()<Description>Method</Description></Method>

<Doc>	duplicate_scene( (Song)arg1, (int)arg2) -&gt; None : Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. C++ signature :  void duplicate_scene(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.duplicate_track()<Description>Method</Description></Method>

<Doc>	duplicate_track( (Song)arg1, (int)arg2) -&gt; None : Duplicates a track and selects the new one. Raises a limitation error if creating a new track would exceed the limitations. C++ signature :  void duplicate_track(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.end_undo_step()<Description>Method</Description></Method>

<Doc>	end_undo_step( (Song)arg1) -&gt; None : C++ signature :  void end_undo_step(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.exclusive_arm_has_listener()<Description>Method</Description></Method>

<Doc>	exclusive_arm_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "exclusive_arm". C++ signature :  bool exclusive_arm_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.get_beats_loop_length()<Description>Method</Description></Method>

<Doc>	get_beats_loop_length( (Song)arg1) -&gt; BeatTime : Get const access to the songs loop length, using a BeatTime class with the current global set signature. C++ signature :  NPythonSong::TBeatTime get_beats_loop_length(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.get_beats_loop_start()<Description>Method</Description></Method>

<Doc>	get_beats_loop_start( (Song)arg1) -&gt; BeatTime : Get const access to the songs loop start, using a BeatTime class with the current global set signature. C++ signature :  NPythonSong::TBeatTime get_beats_loop_start(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.get_current_beats_song_time()<Description>Method</Description></Method>

<Doc>	get_current_beats_song_time( (Song)arg1) -&gt; BeatTime : Get const access to the songs current playing position, using a BeatTime class with the current global set signature. C++ signature :  NPythonSong::TBeatTime get_current_beats_song_time(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.get_current_smpte_song_time()<Description>Method</Description></Method>

<Doc>	get_current_smpte_song_time( (Song)arg1, (int)arg2) -&gt; SmptTime : Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. C++ signature :  NPythonSong::TSmptTime get_current_smpte_song_time(TPyHandle&lt;ASong&gt;,int)</Doc>

<Method>Live.Song.Song.groove_amount_has_listener()<Description>Method</Description></Method>

<Doc>	groove_amount_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "groove_amount". C++ signature :  bool groove_amount_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.is_cue_point_selected()<Description>Method</Description></Method>

<Doc>	is_cue_point_selected( (Song)arg1) -&gt; bool : Return true if the global playing pos is currently on a cue point. C++ signature :  bool is_cue_point_selected(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.is_playing_has_listener()<Description>Method</Description></Method>

<Doc>	is_playing_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_playing". C++ signature :  bool is_playing_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.jump_by()<Description>Method</Description></Method>

<Doc>	jump_by( (Song)arg1, (float)arg2) -&gt; None : Set a new playing pos, relative to the current one. C++ signature :  void jump_by(TPyHandle&lt;ASong&gt;,double)</Doc>

<Method>Live.Song.Song.jump_to_next_cue()<Description>Method</Description></Method>

<Doc>	jump_to_next_cue( (Song)arg1) -&gt; None : Jump to the next cue (marker) if possible. C++ signature :  void jump_to_next_cue(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.jump_to_prev_cue()<Description>Method</Description></Method>

<Doc>	jump_to_prev_cue( (Song)arg1) -&gt; None : Jump to the prior cue (marker) if possible. C++ signature :  void jump_to_prev_cue(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.loop_has_listener()<Description>Method</Description></Method>

<Doc>	loop_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop". C++ signature :  bool loop_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.loop_length_has_listener()<Description>Method</Description></Method>

<Doc>	loop_length_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_length". C++ signature :  bool loop_length_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.loop_start_has_listener()<Description>Method</Description></Method>

<Doc>	loop_start_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_start". C++ signature :  bool loop_start_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.metronome_has_listener()<Description>Method</Description></Method>

<Doc>	metronome_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "metronome". C++ signature :  bool metronome_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.midi_recording_quantization_has_listener()<Description>Method</Description></Method>

<Doc>	midi_recording_quantization_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_recording_quantization". C++ signature :  bool midi_recording_quantization_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.nudge_down_has_listener()<Description>Method</Description></Method>

<Doc>	nudge_down_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "nudge_down". C++ signature :  bool nudge_down_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.nudge_up_has_listener()<Description>Method</Description></Method>

<Doc>	nudge_up_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "nudge_up". C++ signature :  bool nudge_up_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.overdub_has_listener()<Description>Method</Description></Method>

<Doc>	overdub_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "overdub". C++ signature :  bool overdub_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.play_selection()<Description>Method</Description></Method>

<Doc>	play_selection( (Song)arg1) -&gt; None : Start playing the current set selection, or do nothing if no selection is set. C++ signature :  void play_selection(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.punch_in_has_listener()<Description>Method</Description></Method>

<Doc>	punch_in_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "punch_in". C++ signature :  bool punch_in_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.punch_out_has_listener()<Description>Method</Description></Method>

<Doc>	punch_out_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "punch_out". C++ signature :  bool punch_out_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.re_enable_automation()<Description>Method</Description></Method>

<Doc>	re_enable_automation( (Song)arg1) -&gt; None : Discards overrides of automated parameters. C++ signature :  void re_enable_automation(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.re_enable_automation_enabled_has_listener()<Description>Method</Description></Method>

<Doc>	re_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "re_enable_automation_enabled". C++ signature :  bool re_enable_automation_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.record_mode_has_listener()<Description>Method</Description></Method>

<Doc>	record_mode_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "record_mode". C++ signature :  bool record_mode_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.redo()<Description>Method</Description></Method>

<Doc>	redo( (Song)arg1) -&gt; None : Redo the last action that was undone. C++ signature :  void redo(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.remove_appointed_device_listener()<Description>Method</Description></Method>

<Doc>	remove_appointed_device_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "appointed_device". C++ signature :  void remove_appointed_device_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_arrangement_overdub_listener()<Description>Method</Description></Method>

<Doc>	remove_arrangement_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arrangement_overdub". C++ signature :  void remove_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_back_to_arranger_listener()<Description>Method</Description></Method>

<Doc>	remove_back_to_arranger_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "back_to_arranger". C++ signature :  void remove_back_to_arranger_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_can_jump_to_next_cue_listener()<Description>Method</Description></Method>

<Doc>	remove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_jump_to_next_cue". C++ signature :  void remove_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_can_jump_to_prev_cue_listener()<Description>Method</Description></Method>

<Doc>	remove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_jump_to_prev_cue". C++ signature :  void remove_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_clip_trigger_quantization_listener()<Description>Method</Description></Method>

<Doc>	remove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_trigger_quantization". C++ signature :  void remove_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_cue_points_listener()<Description>Method</Description></Method>

<Doc>	remove_cue_points_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "cue_points". C++ signature :  void remove_cue_points_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_current_song_time_listener()<Description>Method</Description></Method>

<Doc>	remove_current_song_time_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_song_time". C++ signature :  void remove_current_song_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_exclusive_arm_listener()<Description>Method</Description></Method>

<Doc>	remove_exclusive_arm_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "exclusive_arm". C++ signature :  void remove_exclusive_arm_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_groove_amount_listener()<Description>Method</Description></Method>

<Doc>	remove_groove_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "groove_amount". C++ signature :  void remove_groove_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_is_playing_listener()<Description>Method</Description></Method>

<Doc>	remove_is_playing_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_playing". C++ signature :  void remove_is_playing_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_loop_length_listener()<Description>Method</Description></Method>

<Doc>	remove_loop_length_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_length". C++ signature :  void remove_loop_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_loop_listener()<Description>Method</Description></Method>

<Doc>	remove_loop_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop". C++ signature :  void remove_loop_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_loop_start_listener()<Description>Method</Description></Method>

<Doc>	remove_loop_start_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_start". C++ signature :  void remove_loop_start_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_metronome_listener()<Description>Method</Description></Method>

<Doc>	remove_metronome_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "metronome". C++ signature :  void remove_metronome_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_midi_recording_quantization_listener()<Description>Method</Description></Method>

<Doc>	remove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_recording_quantization". C++ signature :  void remove_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_nudge_down_listener()<Description>Method</Description></Method>

<Doc>	remove_nudge_down_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "nudge_down". C++ signature :  void remove_nudge_down_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_nudge_up_listener()<Description>Method</Description></Method>

<Doc>	remove_nudge_up_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "nudge_up". C++ signature :  void remove_nudge_up_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_overdub_listener()<Description>Method</Description></Method>

<Doc>	remove_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "overdub". C++ signature :  void remove_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_punch_in_listener()<Description>Method</Description></Method>

<Doc>	remove_punch_in_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "punch_in". C++ signature :  void remove_punch_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_punch_out_listener()<Description>Method</Description></Method>

<Doc>	remove_punch_out_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "punch_out". C++ signature :  void remove_punch_out_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_re_enable_automation_enabled_listener()<Description>Method</Description></Method>

<Doc>	remove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "re_enable_automation_enabled". C++ signature :  void remove_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_record_mode_listener()<Description>Method</Description></Method>

<Doc>	remove_record_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "record_mode". C++ signature :  void remove_record_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_return_tracks_listener()<Description>Method</Description></Method>

<Doc>	remove_return_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_tracks". C++ signature :  void remove_return_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_scenes_listener()<Description>Method</Description></Method>

<Doc>	remove_scenes_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scenes". C++ signature :  void remove_scenes_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_session_automation_record_listener()<Description>Method</Description></Method>

<Doc>	remove_session_automation_record_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_automation_record". C++ signature :  void remove_session_automation_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_session_record_listener()<Description>Method</Description></Method>

<Doc>	remove_session_record_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_record". C++ signature :  void remove_session_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_session_record_status_listener()<Description>Method</Description></Method>

<Doc>	remove_session_record_status_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_record_status". C++ signature :  void remove_session_record_status_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_signature_denominator_listener()<Description>Method</Description></Method>

<Doc>	remove_signature_denominator_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_denominator". C++ signature :  void remove_signature_denominator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_signature_numerator_listener()<Description>Method</Description></Method>

<Doc>	remove_signature_numerator_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_numerator". C++ signature :  void remove_signature_numerator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_song_length_listener()<Description>Method</Description></Method>

<Doc>	remove_song_length_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "song_length". C++ signature :  void remove_song_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_swing_amount_listener()<Description>Method</Description></Method>

<Doc>	remove_swing_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "swing_amount". C++ signature :  void remove_swing_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_tempo_listener()<Description>Method</Description></Method>

<Doc>	remove_tempo_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_tracks_listener()<Description>Method</Description></Method>

<Doc>	remove_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tracks". C++ signature :  void remove_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.remove_visible_tracks_listener()<Description>Method</Description></Method>

<Doc>	remove_visible_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_tracks". C++ signature :  void remove_visible_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.return_tracks_has_listener()<Description>Method</Description></Method>

<Doc>	return_tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_tracks". C++ signature :  bool return_tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.scenes_has_listener()<Description>Method</Description></Method>

<Doc>	scenes_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scenes". C++ signature :  bool scenes_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.scrub_by()<Description>Method</Description></Method>

<Doc>	scrub_by( (Song)arg1, (float)arg2) -&gt; None : Same as jump_by, but does not stop playback. C++ signature :  void scrub_by(TPyHandle&lt;ASong&gt;,double)</Doc>

<Method>Live.Song.Song.session_automation_record_has_listener()<Description>Method</Description></Method>

<Doc>	session_automation_record_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_automation_record". C++ signature :  bool session_automation_record_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.session_record_has_listener()<Description>Method</Description></Method>

<Doc>	session_record_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_record". C++ signature :  bool session_record_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.session_record_status_has_listener()<Description>Method</Description></Method>

<Doc>	session_record_status_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_record_status". C++ signature :  bool session_record_status_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.set_or_delete_cue()<Description>Method</Description></Method>

<Doc>	set_or_delete_cue( (Song)arg1) -&gt; None : When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. C++ signature :  void set_or_delete_cue(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.signature_denominator_has_listener()<Description>Method</Description></Method>

<Doc>	signature_denominator_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_denominator". C++ signature :  bool signature_denominator_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.signature_numerator_has_listener()<Description>Method</Description></Method>

<Doc>	signature_numerator_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_numerator". C++ signature :  bool signature_numerator_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.song_length_has_listener()<Description>Method</Description></Method>

<Doc>	song_length_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "song_length". C++ signature :  bool song_length_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.start_playing()<Description>Method</Description></Method>

<Doc>	start_playing( (Song)arg1) -&gt; None : Start playing from the startmarker C++ signature :  void start_playing(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.stop_all_clips()<Description>Method</Description></Method>

<Doc>	stop_all_clips( (Song)arg1 [, (bool)Quantized=True]) -&gt; None : Stop all playing Clips (if any) but continue playing the Song. C++ signature :  void stop_all_clips(TPyHandle&lt;ASong&gt; [,bool=True])</Doc>

<Method>Live.Song.Song.stop_playing()<Description>Method</Description></Method>

<Doc>	stop_playing( (Song)arg1) -&gt; None : Stop playing the Song. C++ signature :  void stop_playing(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.swing_amount_has_listener()<Description>Method</Description></Method>

<Doc>	swing_amount_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "swing_amount". C++ signature :  bool swing_amount_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.tap_tempo()<Description>Method</Description></Method>

<Doc>	tap_tempo( (Song)arg1) -&gt; None : Trigger the tap tempo function. C++ signature :  void tap_tempo(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.tempo_has_listener()<Description>Method</Description></Method>

<Doc>	tempo_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.tracks_has_listener()<Description>Method</Description></Method>

<Doc>	tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tracks". C++ signature :  bool tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.trigger_session_record()<Description>Method</Description></Method>

<Doc>	trigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) -&gt; None : Triggers a new session recording. C++ signature :  void trigger_session_record(TPyHandle&lt;ASong&gt; [,double=1.7976931348623157e+308])</Doc>

<Method>Live.Song.Song.undo()<Description>Method</Description></Method>

<Doc>	undo( (Song)arg1) -&gt; None : Undo the last action that was made. C++ signature :  void undo(TPyHandle&lt;ASong&gt;)</Doc>

<Method>Live.Song.Song.visible_tracks_has_listener()<Description>Method</Description></Method>

<Doc>	visible_tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_tracks". C++ signature :  bool visible_tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>

<Class>Live.Song.Song.View<Description>Class</Description></Class>

<Doc>	Representing the view aspects of a Live document: The Session and Arrangerview.</Doc>

<Property>Live.Song.Song.View.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the song view.</Doc>

<Property>Live.Song.Song.View.detail_clip<Description>Property</Description></Property>

<Doc>	Get/Set the Clip that is currently visible in Lives Detailview.</Doc>

<Property>Live.Song.Song.View.draw_mode<Description>Property</Description></Property>

<Doc>	Get/Set if the Envelope/Note draw mode is enabled.</Doc>

<Property>Live.Song.Song.View.follow_song<Description>Property</Description></Property>

<Doc>	Get/Set if the Arrangerview should scroll to show the playmarker.</Doc>

<Property>Live.Song.Song.View.highlighted_clip_slot<Description>Property</Description></Property>

<Doc>	Get/Set the clip slot, defined via the highlighted track and scene in the Session.Will be None for Master- and Sendtracks.</Doc>

<Property>Live.Song.Song.View.selected_parameter<Description>Property</Description></Property>

<Doc>	Get the currently selected device parameter.</Doc>

<Property>Live.Song.Song.View.selected_scene<Description>Property</Description></Property>

<Doc>	Get/Set the current selected scene in Lives Sessionview.</Doc>

<Property>Live.Song.Song.View.selected_track<Description>Property</Description></Property>

<Doc>	Get/Set the current selected Track in Lives Session or Arrangerview.</Doc>

<Method>Live.Song.Song.View.add_detail_clip_listener()<Description>Method</Description></Method>

<Doc>	add_detail_clip_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "detail_clip" has changed. C++ signature :  void add_detail_clip_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.add_draw_mode_listener()<Description>Method</Description></Method>

<Doc>	add_draw_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "draw_mode" has changed. C++ signature :  void add_draw_mode_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.add_follow_song_listener()<Description>Method</Description></Method>

<Doc>	add_follow_song_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "follow_song" has changed. C++ signature :  void add_follow_song_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.add_selected_parameter_listener()<Description>Method</Description></Method>

<Doc>	add_selected_parameter_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_parameter" has changed. C++ signature :  void add_selected_parameter_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.add_selected_scene_listener()<Description>Method</Description></Method>

<Doc>	add_selected_scene_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_scene" has changed. C++ signature :  void add_selected_scene_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.add_selected_track_listener()<Description>Method</Description></Method>

<Doc>	add_selected_track_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_track" has changed. C++ signature :  void add_selected_track_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.detail_clip_has_listener()<Description>Method</Description></Method>

<Doc>	detail_clip_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "detail_clip". C++ signature :  bool detail_clip_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.draw_mode_has_listener()<Description>Method</Description></Method>

<Doc>	draw_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "draw_mode". C++ signature :  bool draw_mode_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.follow_song_has_listener()<Description>Method</Description></Method>

<Doc>	follow_song_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "follow_song". C++ signature :  bool follow_song_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.remove_detail_clip_listener()<Description>Method</Description></Method>

<Doc>	remove_detail_clip_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "detail_clip". C++ signature :  void remove_detail_clip_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.remove_draw_mode_listener()<Description>Method</Description></Method>

<Doc>	remove_draw_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "draw_mode". C++ signature :  void remove_draw_mode_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.remove_follow_song_listener()<Description>Method</Description></Method>

<Doc>	remove_follow_song_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "follow_song". C++ signature :  void remove_follow_song_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.remove_selected_parameter_listener()<Description>Method</Description></Method>

<Doc>	remove_selected_parameter_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_parameter". C++ signature :  void remove_selected_parameter_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.remove_selected_scene_listener()<Description>Method</Description></Method>

<Doc>	remove_selected_scene_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_scene". C++ signature :  void remove_selected_scene_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.remove_selected_track_listener()<Description>Method</Description></Method>

<Doc>	remove_selected_track_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_track". C++ signature :  void remove_selected_track_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.select_device()<Description>Method</Description></Method>

<Doc>	select_device( (View)arg1, (Device)arg2) -&gt; None : Select the given device. C++ signature :  void select_device(TPyViewData&lt;ASong&gt;,TPyHandle&lt;ADevice&gt;)</Doc>

<Method>Live.Song.Song.View.selected_parameter_has_listener()<Description>Method</Description></Method>

<Doc>	selected_parameter_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_parameter". C++ signature :  bool selected_parameter_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.selected_scene_has_listener()<Description>Method</Description></Method>

<Doc>	selected_scene_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_scene". C++ signature :  bool selected_scene_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Method>Live.Song.Song.View.selected_track_has_listener()<Description>Method</Description></Method>

<Doc>	selected_track_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_track". C++ signature :  bool selected_track_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>

<Class>Live.Song.TimeFormat<Description>Class</Description></Class>

<Value>Live.Song.TimeFormat.ms_time<Description>Value</Description></Value>

<Value>Live.Song.TimeFormat.smpte_24<Description>Value</Description></Value>

<Value>Live.Song.TimeFormat.smpte_25<Description>Value</Description></Value>

<Value>Live.Song.TimeFormat.smpte_29<Description>Value</Description></Value>

<Value>Live.Song.TimeFormat.smpte_30<Description>Value</Description></Value>

<Value>Live.Song.TimeFormat.smpte_30_drop<Description>Value</Description></Value>

<Module>Live.String<Description>Module</Description></Module>

<Module>Live.Track<Description>Module</Description></Module>

<Class>Live.Track.DeviceContainer<Description>Class</Description></Class>

<Doc>	This class is a common super class of Track and Chain</Doc>

<Class>Live.Track.DeviceInsertMode<Description>Class</Description></Class>

<Value>Live.Track.DeviceInsertMode.count<Description>Value</Description></Value>

<Value>Live.Track.DeviceInsertMode.default<Description>Value</Description></Value>

<Value>Live.Track.DeviceInsertMode.selected_left<Description>Value</Description></Value>

<Value>Live.Track.DeviceInsertMode.selected_right<Description>Value</Description></Value>

<Class>Live.Track.Track<Description>Class</Description></Class>

<Doc>	This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.</Doc>

<Property>Live.Track.Track.arm<Description>Property</Description></Property>

<Doc>	Arm the track for recording. Not available for Master- and Send Tracks.</Doc>

<Property>Live.Track.Track.can_be_armed<Description>Property</Description></Property>

<Doc>	return True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Master Tracks).</Doc>

<Property>Live.Track.Track.can_be_frozen<Description>Property</Description></Property>

<Doc>	return True, if this Track can be frozen.</Doc>

<Property>Live.Track.Track.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the track.</Doc>

<Property>Live.Track.Track.clip_slots<Description>Property</Description></Property>

<Doc>	const access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the master and sendtracks.</Doc>

<Property>Live.Track.Track.color<Description>Property</Description></Property>

<Doc>	Get/set access to the color of the Track (RGB).</Doc>

<Property>Live.Track.Track.current_input_routing<Description>Property</Description></Property>

<Doc>	Get/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Property>Live.Track.Track.current_input_sub_routing<Description>Property</Description></Property>

<Doc>	Get/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Property>Live.Track.Track.current_monitoring_state<Description>Property</Description></Property>

<Doc>	Get/Set the track's current monitoring state.</Doc>

<Property>Live.Track.Track.current_output_routing<Description>Property</Description></Property>

<Doc>	Get/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Property>Live.Track.Track.current_output_sub_routing<Description>Property</Description></Property>

<Doc>	Get/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Property>Live.Track.Track.devices<Description>Property</Description></Property>

<Doc>	Return const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the 'mixer_device' that every Trackalways has.</Doc>

<Property>Live.Track.Track.fired_slot_index<Description>Property</Description></Property>

<Doc>	const access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track's stop button has been fired.</Doc>

<Property>Live.Track.Track.fold_state<Description>Property</Description></Property>

<Doc>	Get/Set whether the track is folded or not. Only available if is_foldable is True.</Doc>

<Property>Live.Track.Track.has_audio_input<Description>Property</Description></Property>

<Doc>	return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.</Doc>

<Property>Live.Track.Track.has_audio_output<Description>Property</Description></Property>

<Doc>	return True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument.</Doc>

<Property>Live.Track.Track.has_midi_input<Description>Property</Description></Property>

<Doc>	return True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks.</Doc>

<Property>Live.Track.Track.has_midi_output<Description>Property</Description></Property>

<Doc>	return True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments.</Doc>

<Property>Live.Track.Track.implicit_arm<Description>Property</Description></Property>

<Doc>	Arm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set.</Doc>

<Property>Live.Track.Track.input_meter_left<Description>Property</Description></Property>

<Doc>	Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc>

<Property>Live.Track.Track.input_meter_level<Description>Property</Description></Property>

<Doc>	Return the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0.</Doc>

<Property>Live.Track.Track.input_meter_right<Description>Property</Description></Property>

<Doc>	Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc>

<Property>Live.Track.Track.input_routings<Description>Property</Description></Property>

<Doc>	Const access to the list of available input routings.</Doc>

<Property>Live.Track.Track.input_sub_routings<Description>Property</Description></Property>

<Doc>	Return a list of all available input sub routings.</Doc>

<Property>Live.Track.Track.is_foldable<Description>Property</Description></Property>

<Doc>	return True if the track can be (un)folded to hide/reveal contained tracks.</Doc>

<Property>Live.Track.Track.is_frozen<Description>Property</Description></Property>

<Doc>	return True if this Track is currently frozen. No changes should be applied to the track's devices or clips while it is frozen.</Doc>

<Property>Live.Track.Track.is_part_of_selection<Description>Property</Description></Property>

<Doc>	return False if the track is not selected.</Doc>

<Property>Live.Track.Track.is_visible<Description>Property</Description></Property>

<Doc>	return False if the track is hidden within a folded group track.</Doc>

<Property>Live.Track.Track.mixer_device<Description>Property</Description></Property>

<Doc>	Return access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters.</Doc>

<Property>Live.Track.Track.mute<Description>Property</Description></Property>

<Doc>	Mute/unmute the track.</Doc>

<Property>Live.Track.Track.muted_via_solo<Description>Property</Description></Property>

<Doc>	Returns true if the track is muted because another track is soloed.</Doc>

<Property>Live.Track.Track.name<Description>Property</Description></Property>

<Doc>	Read/write access to the name of the Track, as visible in the track header.</Doc>

<Property>Live.Track.Track.output_meter_left<Description>Property</Description></Property>

<Doc>	Momentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc>

<Property>Live.Track.Track.output_meter_level<Description>Property</Description></Property>

<Doc>	Return the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0.</Doc>

<Property>Live.Track.Track.output_meter_right<Description>Property</Description></Property>

<Doc>	Momentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc>

<Property>Live.Track.Track.output_routings<Description>Property</Description></Property>

<Doc>	Const access to the list of all available output routings.</Doc>

<Property>Live.Track.Track.output_sub_routings<Description>Property</Description></Property>

<Doc>	Return a list of all available output sub routings.</Doc>

<Property>Live.Track.Track.playing_slot_index<Description>Property</Description></Property>

<Doc>	const access to the index of the currently playing clip in the track.Will be -1 when no clip is playing.</Doc>

<Property>Live.Track.Track.solo<Description>Property</Description></Property>

<Doc>	Get/Set the solo status of the track. Note that this will not disable thesolo state of any other track. If you want exclusive solo, you have to disable the solo state of the other Tracks manually.</Doc>

<Property>Live.Track.Track.view<Description>Property</Description></Property>

<Doc>	Representing the view aspects of a Track.</Doc>

<Method>Live.Track.Track.add_arm_listener()<Description>Method</Description></Method>

<Doc>	add_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arm" has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_clip_slots_listener()<Description>Method</Description></Method>

<Doc>	add_clip_slots_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_color_listener()<Description>Method</Description></Method>

<Doc>	add_color_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_current_input_routing_listener()<Description>Method</Description></Method>

<Doc>	add_current_input_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_input_routing" has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_current_input_sub_routing_listener()<Description>Method</Description></Method>

<Doc>	add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_input_sub_routing" has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_current_monitoring_state_listener()<Description>Method</Description></Method>

<Doc>	add_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_monitoring_state" has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_current_output_routing_listener()<Description>Method</Description></Method>

<Doc>	add_current_output_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_output_routing" has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_current_output_sub_routing_listener()<Description>Method</Description></Method>

<Doc>	add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_output_sub_routing" has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_devices_listener()<Description>Method</Description></Method>

<Doc>	add_devices_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_fired_slot_index_listener()<Description>Method</Description></Method>

<Doc>	add_fired_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "fired_slot_index" has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_has_audio_input_listener()<Description>Method</Description></Method>

<Doc>	add_has_audio_input_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_input" has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_has_audio_output_listener()<Description>Method</Description></Method>

<Doc>	add_has_audio_output_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_output" has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_has_midi_input_listener()<Description>Method</Description></Method>

<Doc>	add_has_midi_input_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_input" has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_has_midi_output_listener()<Description>Method</Description></Method>

<Doc>	add_has_midi_output_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_output" has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_implicit_arm_listener()<Description>Method</Description></Method>

<Doc>	add_implicit_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "implicit_arm" has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_input_meter_left_listener()<Description>Method</Description></Method>

<Doc>	add_input_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_left" has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_input_meter_level_listener()<Description>Method</Description></Method>

<Doc>	add_input_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_level" has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_input_meter_right_listener()<Description>Method</Description></Method>

<Doc>	add_input_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_right" has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_is_frozen_listener()<Description>Method</Description></Method>

<Doc>	add_is_frozen_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_frozen" has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_mute_listener()<Description>Method</Description></Method>

<Doc>	add_mute_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_muted_via_solo_listener()<Description>Method</Description></Method>

<Doc>	add_muted_via_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_output_meter_left_listener()<Description>Method</Description></Method>

<Doc>	add_output_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_left" has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_output_meter_level_listener()<Description>Method</Description></Method>

<Doc>	add_output_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_level" has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_output_meter_right_listener()<Description>Method</Description></Method>

<Doc>	add_output_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_right" has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_playing_slot_index_listener()<Description>Method</Description></Method>

<Doc>	add_playing_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_slot_index" has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.add_solo_listener()<Description>Method</Description></Method>

<Doc>	add_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.arm_has_listener()<Description>Method</Description></Method>

<Doc>	arm_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arm". C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.clip_slots_has_listener()<Description>Method</Description></Method>

<Doc>	clip_slots_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.color_has_listener()<Description>Method</Description></Method>

<Doc>	color_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.current_input_routing_has_listener()<Description>Method</Description></Method>

<Doc>	current_input_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_routing". C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.current_input_sub_routing_has_listener()<Description>Method</Description></Method>

<Doc>	current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_sub_routing". C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.current_monitoring_state_has_listener()<Description>Method</Description></Method>

<Doc>	current_monitoring_state_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_monitoring_state". C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.current_output_routing_has_listener()<Description>Method</Description></Method>

<Doc>	current_output_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_routing". C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.current_output_sub_routing_has_listener()<Description>Method</Description></Method>

<Doc>	current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_sub_routing". C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.delete_device()<Description>Method</Description></Method>

<Doc>	delete_device( (Track)arg1, (int)arg2) -&gt; None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)</Doc>

<Method>Live.Track.Track.devices_has_listener()<Description>Method</Description></Method>

<Doc>	devices_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.duplicate_clip_slot()<Description>Method</Description></Method>

<Doc>	duplicate_clip_slot( (Track)arg1, (int)arg2) -&gt; int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)</Doc>

<Method>Live.Track.Track.fired_slot_index_has_listener()<Description>Method</Description></Method>

<Doc>	fired_slot_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "fired_slot_index". C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.has_audio_input_has_listener()<Description>Method</Description></Method>

<Doc>	has_audio_input_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_input". C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.has_audio_output_has_listener()<Description>Method</Description></Method>

<Doc>	has_audio_output_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_output". C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.has_midi_input_has_listener()<Description>Method</Description></Method>

<Doc>	has_midi_input_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_input". C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.has_midi_output_has_listener()<Description>Method</Description></Method>

<Doc>	has_midi_output_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_output". C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.implicit_arm_has_listener()<Description>Method</Description></Method>

<Doc>	implicit_arm_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "implicit_arm". C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.input_meter_left_has_listener()<Description>Method</Description></Method>

<Doc>	input_meter_left_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_left". C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.input_meter_level_has_listener()<Description>Method</Description></Method>

<Doc>	input_meter_level_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_level". C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.input_meter_right_has_listener()<Description>Method</Description></Method>

<Doc>	input_meter_right_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_right". C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.is_frozen_has_listener()<Description>Method</Description></Method>

<Doc>	is_frozen_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_frozen". C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.jump_in_running_session_clip()<Description>Method</Description></Method>

<Doc>	jump_in_running_session_clip( (Track)arg1, (float)arg2) -&gt; None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)</Doc>

<Method>Live.Track.Track.mute_has_listener()<Description>Method</Description></Method>

<Doc>	mute_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.muted_via_solo_has_listener()<Description>Method</Description></Method>

<Doc>	muted_via_solo_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.output_meter_left_has_listener()<Description>Method</Description></Method>

<Doc>	output_meter_left_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_left". C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.output_meter_level_has_listener()<Description>Method</Description></Method>

<Doc>	output_meter_level_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_level". C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.output_meter_right_has_listener()<Description>Method</Description></Method>

<Doc>	output_meter_right_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_right". C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.playing_slot_index_has_listener()<Description>Method</Description></Method>

<Doc>	playing_slot_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_slot_index". C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_arm_listener()<Description>Method</Description></Method>

<Doc>	remove_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arm". C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_clip_slots_listener()<Description>Method</Description></Method>

<Doc>	remove_clip_slots_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_color_listener()<Description>Method</Description></Method>

<Doc>	remove_color_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_current_input_routing_listener()<Description>Method</Description></Method>

<Doc>	remove_current_input_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_input_routing". C++ signature :  void remove_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_current_input_sub_routing_listener()<Description>Method</Description></Method>

<Doc>	remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_input_sub_routing". C++ signature :  void remove_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_current_monitoring_state_listener()<Description>Method</Description></Method>

<Doc>	remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_monitoring_state". C++ signature :  void remove_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_current_output_routing_listener()<Description>Method</Description></Method>

<Doc>	remove_current_output_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_output_routing". C++ signature :  void remove_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_current_output_sub_routing_listener()<Description>Method</Description></Method>

<Doc>	remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_output_sub_routing". C++ signature :  void remove_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_devices_listener()<Description>Method</Description></Method>

<Doc>	remove_devices_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_fired_slot_index_listener()<Description>Method</Description></Method>

<Doc>	remove_fired_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "fired_slot_index". C++ signature :  void remove_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_has_audio_input_listener()<Description>Method</Description></Method>

<Doc>	remove_has_audio_input_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_audio_input". C++ signature :  void remove_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_has_audio_output_listener()<Description>Method</Description></Method>

<Doc>	remove_has_audio_output_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_audio_output". C++ signature :  void remove_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_has_midi_input_listener()<Description>Method</Description></Method>

<Doc>	remove_has_midi_input_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_midi_input". C++ signature :  void remove_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_has_midi_output_listener()<Description>Method</Description></Method>

<Doc>	remove_has_midi_output_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_midi_output". C++ signature :  void remove_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_implicit_arm_listener()<Description>Method</Description></Method>

<Doc>	remove_implicit_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "implicit_arm". C++ signature :  void remove_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_input_meter_left_listener()<Description>Method</Description></Method>

<Doc>	remove_input_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_left". C++ signature :  void remove_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_input_meter_level_listener()<Description>Method</Description></Method>

<Doc>	remove_input_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_level". C++ signature :  void remove_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_input_meter_right_listener()<Description>Method</Description></Method>

<Doc>	remove_input_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_right". C++ signature :  void remove_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_is_frozen_listener()<Description>Method</Description></Method>

<Doc>	remove_is_frozen_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_frozen". C++ signature :  void remove_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_mute_listener()<Description>Method</Description></Method>

<Doc>	remove_mute_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_muted_via_solo_listener()<Description>Method</Description></Method>

<Doc>	remove_muted_via_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_output_meter_left_listener()<Description>Method</Description></Method>

<Doc>	remove_output_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_left". C++ signature :  void remove_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_output_meter_level_listener()<Description>Method</Description></Method>

<Doc>	remove_output_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_level". C++ signature :  void remove_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_output_meter_right_listener()<Description>Method</Description></Method>

<Doc>	remove_output_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_right". C++ signature :  void remove_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_playing_slot_index_listener()<Description>Method</Description></Method>

<Doc>	remove_playing_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_slot_index". C++ signature :  void remove_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.remove_solo_listener()<Description>Method</Description></Method>

<Doc>	remove_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.solo_has_listener()<Description>Method</Description></Method>

<Doc>	solo_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Method>Live.Track.Track.stop_all_clips()<Description>Method</Description></Method>

<Doc>	stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) -&gt; None : Stop running and triggered clip and slots on this track. C++ signature :  void stop_all_clips(TTrackPyHandle [,bool=True])</Doc>

<Sub-Class>Live.Track.Track.monitoring_states<Description>Sub-Class</Description></Sub-Class>

<Value>Live.Track.Track.monitoring_states.AUTO<Description>Value</Description></Value>

<Value>Live.Track.Track.monitoring_states.IN<Description>Value</Description></Value>

<Value>Live.Track.Track.monitoring_states.OFF<Description>Value</Description></Value>

<Class>Live.Track.Track.View<Description>Class</Description></Class>

<Doc>	Representing the view aspects of a Track.</Doc>

<Property>Live.Track.Track.View.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the track view.</Doc>

<Property>Live.Track.Track.View.device_insert_mode<Description>Property</Description></Property>

<Doc>	Get/Listen the device insertion mode of the track.  By default, it will insert devices at the end, but it can be changed to make it relative to current selection.</Doc>

<Property>Live.Track.Track.View.is_collapsed<Description>Property</Description></Property>

<Doc>	Get/Set/Listen if the track is shown collapsed in the arranger view.</Doc>

<Property>Live.Track.Track.View.selected_device<Description>Property</Description></Property>

<Doc>	Get/Set/Listen the insertion mode of the device.  While in insertion mode, loading new devices from the browser will place devices at the selected position.</Doc>

<Method>Live.Track.Track.View.add_device_insert_mode_listener()<Description>Method</Description></Method>

<Doc>	add_device_insert_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "device_insert_mode" has changed. C++ signature :  void add_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.add_is_collapsed_listener()<Description>Method</Description></Method>

<Doc>	add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.add_selected_device_listener()<Description>Method</Description></Method>

<Doc>	add_selected_device_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_device" has changed. C++ signature :  void add_selected_device_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.device_insert_mode_has_listener()<Description>Method</Description></Method>

<Doc>	device_insert_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "device_insert_mode". C++ signature :  bool device_insert_mode_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.is_collapsed_has_listener()<Description>Method</Description></Method>

<Doc>	is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.remove_device_insert_mode_listener()<Description>Method</Description></Method>

<Doc>	remove_device_insert_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "device_insert_mode". C++ signature :  void remove_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.remove_is_collapsed_listener()<Description>Method</Description></Method>

<Doc>	remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.remove_selected_device_listener()<Description>Method</Description></Method>

<Doc>	remove_selected_device_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_device". C++ signature :  void remove_selected_device_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

<Method>Live.Track.Track.View.select_instrument()<Description>Method</Description></Method>

<Doc>	select_instrument( (View)arg1) -&gt; bool : Selects the track's instrument if it has one. C++ signature :  bool select_instrument(TPyViewData&lt;ATrack&gt;)</Doc>

<Method>Live.Track.Track.View.selected_device_has_listener()<Description>Method</Description></Method>

<Doc>	selected_device_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_device". C++ signature :  bool selected_device_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>

</Live>
